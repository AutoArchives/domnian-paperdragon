From 207c33c8763079408d6d80f988da1625cadf3179 Mon Sep 17 00:00:00 2001
From: willies952002 <admin@domnian.com>
Date: Sun, 10 Dec 2017 13:49:00 -0500
Subject: [PATCH] Implement Player Head API (DragonAPI)

---
 .../paperdragon/api/CraftDAPI_Heads.java      | 84 +++++++++++++++++++
 .../paperdragon/api/CraftDragonAPI.java       |  1 +
 .../minecraft/nbt/GameProfileSerializer.java  |  2 +
 3 files changed, 87 insertions(+)
 create mode 100644 src/main/java/com/domnian/paperdragon/api/CraftDAPI_Heads.java

diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Heads.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Heads.java
new file mode 100644
index 0000000000..c62c063d8f
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Heads.java
@@ -0,0 +1,84 @@
+/*
+ * Copyright (c) 2017. Domnian Development
+ *
+ * This source code is proprietary software and must not be
+ * redistributed without Domnian Development's approval
+ */
+package com.domnian.paperdragon.api;
+
+import co.aikar.timings.NullTimingHandler;
+import co.aikar.timings.Timing;
+import co.aikar.timings.Timings;
+import net.minecraft.nbt.GameProfileSerializer;
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.nbt.NBTTagList;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import org.apache.commons.codec.binary.Base64;
+import org.bukkit.ChatColor;
+import org.bukkit.Material;
+import org.bukkit.inventory.meta.SkullMeta;
+
+import java.lang.reflect.Method;
+import java.nio.charset.Charset;
+import java.util.UUID;
+
+public class CraftDAPI_Heads implements DAPI_Heads {
+
+    private static final Timing skullCreationTimer = timings();
+
+    /**
+     * Get a Timings Instance to Time Skull Creation
+     * @return a timings instance, else an instance of a {@link co.aikar.timings.NullTimingHandler} on failure
+     */
+    private static Timing timings() {
+        try {
+            Method ofSafeMethod = Timings.class.getDeclaredMethod("ofSafe", String.class);
+            boolean oldAccessible = ofSafeMethod.isAccessible();
+            ofSafeMethod.setAccessible(true);
+            Object timings = ofSafeMethod.invoke(null, "Skull Creation");
+            ofSafeMethod.setAccessible(oldAccessible);
+            if (timings instanceof Timing) {
+                return (Timing) timings;
+            }
+        } catch (Exception ignored) {}
+        return new NullTimingHandler();
+    }
+
+    @Override
+    public org.bukkit.inventory.ItemStack getSkullFromName(String name) {
+        org.bukkit.inventory.ItemStack head = new org.bukkit.inventory.ItemStack(Material.PLAYER_HEAD);
+        SkullMeta meta = (SkullMeta) head.getItemMeta();
+        meta.setOwner(name);
+        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', "&r" + name + "'s Head"));
+        head.setItemMeta(meta);
+        return head;
+    }
+
+    @Override
+    public org.bukkit.inventory.ItemStack getSkullFromTexture(String hash) {
+        try (Timing ign = skullCreationTimer.startTimingIfSync()) {
+            String url = "http://textures.minecraft.net/texture/" + hash;
+            ItemStack skull = new ItemStack(Items.PLAYER_HEAD, 1);
+            NBTTagCompound tag = new NBTTagCompound(),
+                    owner = new NBTTagCompound(),
+                    props = new NBTTagCompound(),
+                    textData = new NBTTagCompound();
+            NBTTagList textures = new NBTTagList();
+            owner.set("Id", GameProfileSerializer.createUUID(UUID.randomUUID()));
+            textData.setString("Value", getTextureData(url));
+            textures.add(textData);
+            props.set("textures", textures);
+            owner.set("Properties", props);
+            tag.set("SkullOwner", owner);
+            skull.setTag(tag);
+            return skull.getBukkitStack();
+        }
+    }
+
+    private static String getTextureData(String url) {
+        String texture = "{\"textures\":{\"SKIN\":{\"url\":\"" + url + "\"}}}";
+        return new String(Base64.encodeBase64(texture.getBytes(Charset.forName("UTF-8"))));
+    }
+
+}
diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java b/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
index 81ceb7f598..a6408aab4f 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
@@ -36,6 +36,7 @@ public final class CraftDragonAPI extends DragonAPI {
         misc = new CraftDAPI_Misc();
         meta = new CraftDAPI_Meta();
         chat = new CraftDAPI_Chat();
+        heads = new CraftDAPI_Heads();
     }
 
 }
diff --git a/src/main/java/net/minecraft/nbt/GameProfileSerializer.java b/src/main/java/net/minecraft/nbt/GameProfileSerializer.java
index a654ea9e43..1757c88252 100644
--- a/src/main/java/net/minecraft/nbt/GameProfileSerializer.java
+++ b/src/main/java/net/minecraft/nbt/GameProfileSerializer.java
@@ -186,10 +186,12 @@ public final class GameProfileSerializer {
         }
     }
 
+    public static NBTTagIntArray createUUID(UUID uuid) { return GameProfileSerializer.a(uuid); } // PaperDragon - OBF HELPER
     public static NBTTagIntArray a(UUID uuid) {
         return new NBTTagIntArray(MinecraftSerializableUUID.a(uuid));
     }
 
+    public static UUID loadUUID(NBTBase nbtbase) { return GameProfileSerializer.a(nbtbase); } // PaperDragon - OBF HELPER
     public static UUID a(NBTBase nbtbase) {
         if (nbtbase.b() != NBTTagIntArray.a) {
             throw new IllegalArgumentException("Expected UUID-Tag to be of type " + NBTTagIntArray.a.a() + ", but found " + nbtbase.b().a() + ".");
-- 
2.20.1.windows.1

