From c05af04fe2d98a8412449e32c54693781b4fd3c9 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 15 Jun 2013 23:19:03 -0400
Subject: [PATCH] ItemStack isSimiliar API to skip durability and name checks

---
 .../java/org/bukkit/inventory/ItemStack.java  | 53 ++++++++++++++++++-
 1 file changed, 52 insertions(+), 1 deletion(-)

diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 495161f6..b58c5347 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -263,8 +263,36 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
      * @param stack the item stack to compare to
      * @return true if the two stacks are equal, ignoring the amount
      */
+    // Paper start - add API to skip checking durability and item name
     @Utility
     public boolean isSimilar(@Nullable ItemStack stack) {
+        return isSimilar(stack, false);
+    }
+
+    /**
+     * This method is the same as equals, but does not consider stack size
+     * (amount).
+     *
+     * @param stack the item stack to compare to
+     * @param skipDur Ignore differences in durability
+     * @return true if the two stacks are equal, ignoring the amount, and optionally durability
+     */
+    @Utility
+    public boolean isSimilar(@Nullable ItemStack stack, boolean skipDur) {
+        return isSimilar(stack, skipDur, false);
+    }
+
+    /**
+     * This method is the same as equals, but does not consider stack size
+     * (amount).
+     *
+     * @param stack the item stack to compare to
+     * @param skipDur Ignore differences in durability
+     * @param skipCheckingName Ignore differences in display name
+     * @return true if the two stacks are equal, ignoring the amount, and optionally durability/name
+     */
+    @Utility
+    public boolean isSimilar(@Nullable ItemStack stack, boolean skipDur, boolean skipCheckingName) {
         if (stack == null) {
             return false;
         }
@@ -272,7 +300,30 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
             return true;
         }
         Material comparisonType = (this.type.isLegacy()) ? Bukkit.getUnsafe().fromLegacy(this.getData(), true) : this.type; // This may be called from legacy item stacks, try to get the right material
-        return comparisonType == stack.getType() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (hasItemMeta() ? Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()) : true);
+        if (comparisonType != stack.getType() || (!skipDur && getDurability() != stack.getDurability())) return false;
+        final boolean hasMeta1 = hasItemMeta();
+        final boolean hasMeta2 = stack.hasItemMeta();
+        if (!hasMeta1 && !hasMeta2) return true;
+
+        final ItemMeta meta1 = hasMeta1 ? getItemMeta() : null;
+        final ItemMeta meta2 = hasMeta2 ? stack.getItemMeta() : null;
+
+        final String prevName1 = meta1 != null ? meta1.getDisplayName() : null;
+        final String prevName2 = meta2 != null ? meta2.getDisplayName() : null;
+        if (skipCheckingName) {
+            if (meta1 != null) meta1.setDisplayName(null);
+            if (meta2 != null) meta2.setDisplayName(null);
+        }
+
+        try {
+            return Bukkit.getItemFactory().equals(meta1, meta2);
+        } finally {
+            if (skipCheckingName) {
+                if (meta1 != null) meta1.setDisplayName(prevName1);
+                if (meta2 != null) meta2.setDisplayName(prevName2);
+            }
+        }
+        // Paper end
     }
 
     @NotNull
-- 
2.22.0

