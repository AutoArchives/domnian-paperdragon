From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 21 Nov 2016 17:02:11 -0500
Subject: [PATCH] MonsterEggSpawn Event


diff --git a/src/main/java/com/domnian/paperdragon/events/MonsterEggSpawnEvent.java b/src/main/java/com/domnian/paperdragon/events/MonsterEggSpawnEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..a5f9794068a1041f5895db6afc2216adda661535
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/events/MonsterEggSpawnEvent.java
@@ -0,0 +1,82 @@
+package com.domnian.paperdragon.events;
+
+
+import org.bukkit.Location;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.Consumer;
+
+public class MonsterEggSpawnEvent extends Event implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+    private boolean canceled;
+
+    private final Player player;
+    private final Location spawnLocation;
+    private final ItemStack item;
+    private final CreatureSpawnEvent.SpawnReason spawnReason;
+    private Consumer<Entity> afterSpawn = null;
+
+    public MonsterEggSpawnEvent(@Nullable HumanEntity player, @NotNull Location spawnLocation, @NotNull ItemStack item, @NotNull CreatureSpawnEvent.SpawnReason spawnReason) {
+        this.player = (Player) player;
+        this.spawnLocation = spawnLocation;
+        this.item = item;
+        this.spawnReason = spawnReason;
+    }
+
+    @Nullable
+    public Player getPlayer() {
+        return player;
+    }
+
+    @NotNull
+    public Location getSpawnLocation() {
+        return spawnLocation;
+    }
+
+    @NotNull
+    public CreatureSpawnEvent.SpawnReason getSpawnReason() {
+        return spawnReason;
+    }
+
+    @Nullable
+    public Consumer<Entity> getAfterSpawn() {
+        return afterSpawn;
+    }
+
+    public void setAfterSpawn(@Nullable Consumer<Entity> afterSpawn) {
+        this.afterSpawn = afterSpawn;
+    }
+
+    @NotNull
+    public ItemStack getItem() {
+        return item;
+    }
+
+    public boolean isCancelled() {
+        return canceled;
+    }
+
+    public void setCancelled(boolean cancel) {
+        canceled = cancel;
+    }
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+}
