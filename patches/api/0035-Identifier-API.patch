From 27759a1cb84147247bdd05f960952d101754b19e Mon Sep 17 00:00:00 2001
From: willies952002 <admin@domnian.com>
Date: Mon, 25 Dec 2017 21:52:38 -0500
Subject: [PATCH] Identifier API

Seems silly, but I want to have a common interface to represent an identity
but not have risk of 2 objects equalling each other.

Example: ChunkIdentifier and a ResidenceIdentifier are 2 ways to identity a context
but cant ever equal each other.

Implementers should not expose entropy data, just provide equal/hashcode.

Objects represended by an Identifier, should be able to use them as their equal/hashcodes.

Manually Applied Patch from Empire Minecraft - Originally by Aikar
---
 .../com/domnian/paperdragon/Identifier.java   |  3 +++
 .../domnian/paperdragon/UniqueIdentifier.java | 27 +++++++++++++++++++
 src/main/java/org/bukkit/Chunk.java           |  2 ++
 src/main/java/org/bukkit/block/Block.java     |  1 +
 4 files changed, 33 insertions(+)
 create mode 100644 src/main/java/com/domnian/paperdragon/Identifier.java
 create mode 100644 src/main/java/com/domnian/paperdragon/UniqueIdentifier.java

diff --git a/src/main/java/com/domnian/paperdragon/Identifier.java b/src/main/java/com/domnian/paperdragon/Identifier.java
new file mode 100644
index 00000000..4873358b
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/Identifier.java
@@ -0,0 +1,3 @@
+package com.domnian.paperdragon;
+
+public interface Identifier {}
diff --git a/src/main/java/com/domnian/paperdragon/UniqueIdentifier.java b/src/main/java/com/domnian/paperdragon/UniqueIdentifier.java
new file mode 100644
index 00000000..c0ade55b
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/UniqueIdentifier.java
@@ -0,0 +1,27 @@
+package com.domnian.paperdragon;
+
+import javax.annotation.Nonnull;
+import java.util.UUID;
+
+public class UniqueIdentifier implements Identifier {
+
+    private final UUID uuid;
+
+    public UniqueIdentifier(@Nonnull UUID uuid) {
+        this.uuid = uuid;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        UniqueIdentifier that = (UniqueIdentifier) o;
+        return uuid.equals(that.uuid);
+    }
+
+    @Override
+    public int hashCode() {
+        return uuid.hashCode();
+    }
+
+}
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 079b9feb..c7dd296b 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -9,6 +9,8 @@ import org.bukkit.entity.Entity;
  */
 public interface Chunk {
 
+    com.domnian.paperdragon.Identifier getIdentifier(); // PaperDragon
+
     /**
      * Gets the X-coordinate of this chunk
      *
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 238de6f0..8bc76119 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -365,4 +365,5 @@ public interface Block extends Metadatable {
      */
     Collection<ItemStack> getDrops(ItemStack tool);
 
+    com.domnian.paperdragon.Identifier getIdentifier(); // PaperDragon
 }
-- 
2.18.0

