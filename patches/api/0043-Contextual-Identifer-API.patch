From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 17 May 2016 19:38:55 -0400
Subject: [PATCH] Contextual Identifer API

Seems silly, but I want to have a common interface to represent an identity
but not have risk of 2 objects equaling each other.

Example: ChunkIdentifier and a ResidenceIdentifier are 2 ways to identify a context
but can't ever equal each other.

But we may want to store counting data by chunk, but also by Residence, and cache to the same cache map.

Objects represented by an Identifier, should be able to use them as their equal/hashcodes.

diff --git a/src/main/java/com/domnian/paperdragon/Identifier.java b/src/main/java/com/domnian/paperdragon/Identifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..0bc4961ffaf467b713b6a4940ed52c80e9a35b95
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/Identifier.java
@@ -0,0 +1,6 @@
+package com.domnian.paperdragon;
+
+/**
+ * Simply represents an object identifier
+ */
+public interface Identifier {}
diff --git a/src/main/java/com/domnian/paperdragon/UniqueIdentifier.java b/src/main/java/com/domnian/paperdragon/UniqueIdentifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..7a19c0f7bab0245ec4835e533c86d5726083dba4
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/UniqueIdentifier.java
@@ -0,0 +1,28 @@
+package com.domnian.paperdragon;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.util.UUID;
+
+public class UniqueIdentifier implements Identifier {
+    private final UUID uuid;
+    public UniqueIdentifier(@NotNull UUID uuid) {
+        this.uuid = uuid;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) { return true; }
+        if (o == null || getClass() != o.getClass()) { return false; }
+
+        UniqueIdentifier that = (UniqueIdentifier) o;
+
+        return uuid.equals(that.uuid);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return uuid.hashCode();
+    }
+}
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 5101cac043921b5dcfb69ba8ba6ae032a4d04462..3ccf1fe9900f367a21e0efe9bf76c176087ad115 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -2,6 +2,7 @@ package org.bukkit;
 
 import java.util.Collection;
 
+import com.domnian.paperdragon.Identifier; // PaperDragon
 import com.domnian.paperdragon.api.meta.PersistentMetaMap; // PaperDragon
 import com.domnian.paperdragon.api.meta.TempMetaMap; // PaperDragon
 import org.bukkit.block.Biome;
@@ -28,6 +29,8 @@ public interface Chunk extends PersistentDataHolder {
     TempMetaMap getTempMeta();
     @NotNull
     PersistentMetaMap getPersistentMeta();
+    @NotNull
+    Identifier getIdentifier(); // PaperDragon
     // PaperDragon end
 
     /**
