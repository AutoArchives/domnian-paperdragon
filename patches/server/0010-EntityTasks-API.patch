From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 11 Jun 2013 23:15:00 -0400
Subject: [PATCH] EntityTasks API

Allows scheduling repeating task timers on an entity level.
Avoids Bukkit system so that tasks will simply maintain themselves on entity removal.

diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
index d5c6381045b5c9a54b37c18c3a0c3f38374a402a..13e53765916b1c18bd5540663c907ab06cedaa0c 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
@@ -23,5 +23,20 @@
 
 package com.domnian.paperdragon.api;
 
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+
 public class CraftDAPI_Entity implements DAPI_Entity {
+
+    @NotNull
+    public <T extends Entity> EntityTask<T> scheduleTask(@NotNull T entity, int interval, @NotNull EntityTask<T> task) {
+        ((CraftEntity) entity).getHandle().entityTasks.add(task);
+        task.init(entity, interval);
+        return task;
+    }
+
+    public void cancelTasks(@NotNull Entity entity) {
+        ((CraftEntity) entity).getHandle().entityTasks.clear();
+    }
 }
diff --git a/src/main/java/com/domnian/paperdragon/api/EntityTasksHandler.java b/src/main/java/com/domnian/paperdragon/api/EntityTasksHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..49affc0a86cb082b7dae39b5ef710407680e669e
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/EntityTasksHandler.java
@@ -0,0 +1,57 @@
+package com.domnian.paperdragon.api;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.chunk.LevelChunk;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+
+public final class EntityTasksHandler {
+
+    private EntityTasksHandler() {}
+
+    public static void tickHandler(Entity entity) {
+        if (entity.entityTasks.isEmpty()) {
+            return;
+        }
+        List<EntityTask<?>> tasksToRun = new ArrayList<>();
+        final Iterator<EntityTask<?>> it = entity.entityTasks.iterator();
+        while (it.hasNext()) {
+            EntityTask<?> task = it.next();
+            if (!task.isValid()) {
+                it.remove();
+                continue;
+            }
+            if (task.isReady()) {
+                tasksToRun.add(task);
+            }
+        }
+
+        tasksToRun.forEach(EntityTask::tick);
+    }
+
+    public static void reload() {
+        for (ServerLevel level : MinecraftServer.getServer().getAllLevels()) {
+            clearTasks(level.chunkTaskScheduler.chunkHolderManager.getOldChunkHolders());
+        }
+    }
+
+    private static void clearTasks(Collection<ChunkHolder> chunkHolders) {
+        for (ChunkHolder chunkHolder : chunkHolders) {
+            LevelChunk chunk = chunkHolder.getTickingChunk();
+            if (chunk == null) {
+                continue;
+            }
+            for (Entity entity : chunk.getChunkHolder().getEntityChunk().getEntityList()) {
+                entity.entityTasks.clear();
+            }
+        }
+    }
+
+    public static class TaskList extends ArrayList<EntityTask<?>> {}
+}
diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index f597d65d56964297eeeed6c7e77703764178fee0..e3905293ebfbbc993f82aea8ce3aab4407fc5a87 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -35,7 +35,7 @@ public final class ChunkEntitySlices {
     protected final EntityCollectionBySection allEntities;
     protected final EntityCollectionBySection hardCollidingEntities;
     protected final Reference2ObjectOpenHashMap<Class<? extends Entity>, EntityCollectionBySection> entitiesByClass;
-    protected final EntityList entities = new EntityList();
+    protected final EntityList entities = new EntityList(); public EntityList getEntityList() { return entities; } // PaperDragon
 
     public ChunkHolder.FullChunkStatus status;
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index b396e9b35f315db37ba070ad4baeec1f098d0cb8..664721c8581df1d81e051f9da3775d5c95883d75 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.level;
 
+import com.domnian.paperdragon.api.EntityTasksHandler; // PaperDragon
 import com.google.common.annotations.VisibleForTesting;
 import co.aikar.timings.TimingHistory; // Paper
 import com.google.common.collect.Lists;
@@ -1181,6 +1182,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         ProfilerFiller gameprofilerfiller = this.getProfiler();
 
         ++entity.tickCount;
+        EntityTasksHandler.tickHandler(entity); // PaperDragon
         this.getProfiler().push(() -> {
             return Registry.ENTITY_TYPE.getKey(entity.getType()).toString();
         });
@@ -1219,6 +1221,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 // Paper end
                 passenger.setOldPosAndRot();
                 ++passenger.tickCount;
+                EntityTasksHandler.tickHandler(passenger); // PaperDragon
                 ProfilerFiller gameprofilerfiller = this.getProfiler();
 
                 gameprofilerfiller.push(() -> {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 9dc32939f61b4bce1395db57404d45e3745eefca..a1ea62bfa8253c4844b1feb91f7f9d19a46131e5 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity;
 
+import com.domnian.paperdragon.api.EntityTasksHandler; // PaperDragon
 import com.domnian.paperdragon.api.meta.MetaApiAccessor; // PaperDragon
 import com.domnian.paperdragon.api.meta.PersistentMetaMap; // PaperDragon
 import com.domnian.paperdragon.api.meta.TempMetaMap; // PaperDragon
@@ -163,6 +164,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     // PaperDragon start
     public final PersistentMetaMap metaMap = new PersistentMetaMap();
     public final TempMetaMap tempMeta = new TempMetaMap();
+    public EntityTasksHandler.TaskList entityTasks = new EntityTasksHandler.TaskList();
     // PaperDragon end
     // CraftBukkit start
     private static final int CURRENT_LEVEL = 2;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9f9213b66c2e3f7a48c37c75137829660a1ec1f5..39a1c07f309654ca58722c3b0445941b19bce3fa 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit;
 
+import com.domnian.paperdragon.api.EntityTasksHandler; // PaperDragon
 import com.domnian.paperdragon.api.meta.MetaApiAccessor; // PaperDragon
 import com.google.common.base.Charsets;
 import com.google.common.base.Function;
@@ -1025,7 +1026,10 @@ public final class CraftServer implements Server {
             ));
             if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper
         }
-        MetaApiAccessor.reload(); // PaperDragon
+        // PaperDragon start
+        MetaApiAccessor.reload();
+        EntityTasksHandler.reload();
+        // PaperDragon end
         this.loadPlugins();
         this.enablePlugins(PluginLoadOrder.STARTUP);
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
