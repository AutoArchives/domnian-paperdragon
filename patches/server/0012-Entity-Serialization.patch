From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 12 Jul 2013 18:58:19 -0400
Subject: [PATCH] Entity Serialization

Allow serializing an Entity to raw NBT, and to get an Entity object without spawning it into the world.

diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
index e411cd2cca237470e6620f5a69deec5d0c6eb63e..d8c187870234a5197075354b929a14aeda4c456a 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
@@ -23,10 +23,21 @@
 
 package com.domnian.paperdragon.api;
 
+import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import com.destroystokyo.paper.entity.RangedEntity;
 import com.domnian.paperdragon.api.meta.Meta;
+import com.domnian.paperdragon.util.MCLog;
+import com.google.common.collect.ImmutableList;
+import com.mojang.serialization.Dynamic;
+import net.minecraft.SharedConstants;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtIo;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.server.MCUtil;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.datafix.DataFixers;
+import net.minecraft.util.datafix.fixes.References;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.PathfinderMob;
 import net.minecraft.world.entity.ai.goal.Goal;
 import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
@@ -36,6 +47,7 @@ import net.minecraft.world.entity.ai.goal.WrappedGoal;
 import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
+import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftBlaze;
 import org.bukkit.craftbukkit.entity.CraftCreature;
@@ -45,6 +57,7 @@ import org.bukkit.craftbukkit.entity.CraftGhast;
 import org.bukkit.craftbukkit.entity.CraftMob;
 import org.bukkit.craftbukkit.entity.CraftSpider;
 import org.bukkit.craftbukkit.entity.CraftWolf;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Blaze;
 import org.bukkit.entity.Creature;
 import org.bukkit.entity.EnderSignal;
@@ -56,6 +69,10 @@ import org.bukkit.entity.Spider;
 import org.bukkit.entity.Wolf;
 import org.jetbrains.annotations.NotNull;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.regex.Pattern;
@@ -162,6 +179,7 @@ public class CraftDAPI_Entity implements DAPI_Entity {
                                             .equalsIgnoreCase(goalName));
         }
     }
+
     @NotNull
     @Override
     public Set<String> listGoalNames(@NotNull Mob mob) {
@@ -296,4 +314,52 @@ public class CraftDAPI_Entity implements DAPI_Entity {
     public void setFireballCooldown(@NotNull Ghast ghast, int cooldown) {
         ((CraftGhast) ghast).getHandle().fireballCooldown = cooldown;
     }
+
+    public final byte[] serializeEntity(@NotNull Entity craftentity) {
+        net.minecraft.world.entity.Entity entity = ((CraftEntity) craftentity).getHandle();
+        CompoundTag cmp = new CompoundTag();
+        final ImmutableList<net.minecraft.world.entity.Entity > pass = entity.passengers;
+        entity.passengers = ImmutableList.of();
+        entity.save(cmp);
+        entity.passengers = pass;
+        cmp.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
+
+        return NBTToBytes(cmp);
+    }
+
+    public final Entity deserializeEntity(byte[] data, @NotNull World world) {
+        if (data.length == 0) {
+            throw new NullPointerException("Data can not be empty for deserialization");
+        }
+        ByteArrayInputStream stream = new ByteArrayInputStream(data);
+
+        try {
+            CompoundTag cmp = NbtIo.readCompressed(new DataInputStream(stream));
+            int version = cmp.contains("DataVersion") ? cmp.getInt("DataVersion") : -1;
+            if (version == -1) {
+                cmp = (CompoundTag) DataFixers.getDataFixer().update(References.ENTITY, new Dynamic<>(NbtOps.INSTANCE, cmp), -1, MCVersions.V1_12_2).getValue();
+                version = MCVersions.V1_12_2;
+            }
+            cmp = (CompoundTag) DataFixers.getDataFixer().update(References.ENTITY, new Dynamic<>(NbtOps.INSTANCE, cmp), version, CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+            net.minecraft.world.entity.Entity entity = EntityType.create(cmp, ((CraftWorld) world).getHandle()).orElse(null);
+
+            return entity != null ? entity.getBukkitEntity() : null;
+        } catch (IOException e) {
+            MCLog.exception(e);
+            return null;
+        }
+    }
+
+    private static byte[] NBTToBytes(CompoundTag nbttagcompound) {
+        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
+
+        try {
+            NbtIo.writeCompressed(nbttagcompound, bytearrayoutputstream);
+        } catch (IOException ignored) {
+            return null;
+        }
+
+        return bytearrayoutputstream.toByteArray();
+    }
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 6986a2388171e534edc00a2424410a7091ea4957..f34b4cbf606ec80e640cfd6b13c6bce840607748 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1288,6 +1288,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return set;
     }
 
+    // PaperDragon start
+    public boolean spawnAt(@NotNull Location loc) {
+        return spawnAt(loc, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+    // PaperDragon end
+
     @Override
     public boolean spawnAt(Location location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
         Preconditions.checkNotNull(location, "location cannot be null");
