From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: willies952002 <admin@domnian.com>
Date: Sun, 27 Jun 2021 11:45:09 -0400
Subject: [PATCH] Add method to serialize an ItemStack's NBT tag


diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Misc.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Misc.java
index 59cc58ea3efb6941ee51006bea9b3cc9f309ed2c..c38b88ef39f1f539e462effde8931e90480552ee 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Misc.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Misc.java
@@ -26,9 +26,9 @@ package com.domnian.paperdragon.api;
 import io.papermc.paper.util.MCUtil;
 import com.destroystokyo.paper.MaterialTags;
 import com.destroystokyo.paper.profile.ProfileProperty;
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
+import com.google.gson.*;
 import net.minecraft.core.BlockPos;
+import net.minecraft.nbt.*;
 import net.minecraft.network.chat.Component;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
@@ -130,4 +130,82 @@ public class CraftDAPI_Misc implements DAPI_Misc {
         return skinUrl.substring(38);
     }
 
+    @NotNull
+    @Override
+    public String getSerializedItemTag(@NotNull org.bukkit.inventory.ItemStack stack) {
+        net.minecraft.world.item.ItemStack nmsItem = ((CraftItemStack)stack).handle;
+        return nmsItem.tag != null ? nbtToJson(nmsItem.tag).toString() : "";
+    }
+
+    private static JsonElement nbtToJson(Tag nbt) {
+        switch (nbt.getType().getPrettyName()) {
+            case "TAG_Byte": { // Byte
+                return new JsonPrimitive(((ByteTag) nbt).getAsByte());
+            }
+            case "TAG_Short": { // Short
+                return new JsonPrimitive(((ShortTag) nbt).getAsShort());
+            }
+            case "TAG_Int": { // Int
+                return new JsonPrimitive(((IntTag) nbt).getAsInt());
+            }
+            case "TAG_Long": { // Long
+                return new JsonPrimitive(((LongTag) nbt).getAsLong());
+            }
+            case "TAG_Float": { // Float
+                return new JsonPrimitive(((FloatTag) nbt).getAsFloat());
+            }
+            case "TAG_Double": { // Double
+                return new JsonPrimitive(((DoubleTag) nbt).getAsDouble());
+            }
+            case "TAG_Byte_Array": { // Byte Array
+                JsonArray result = new JsonArray();
+                ((ByteArrayTag) nbt).forEach(val -> result.add(val.getAsByte()));
+                return result;
+            }
+            case "TAG_String": { // String
+                return new JsonPrimitive(nbt.getAsString());
+            }
+            case "TAG_List": { // List
+                JsonArray result = new JsonArray();
+                ((ListTag) nbt).forEach(val -> result.add(nbtToJson(val)));
+                return result;
+            }
+            case "TAG_Compound": { // Compound (Map)
+                JsonObject result = new JsonObject();
+                ((net.minecraft.nbt.CompoundTag) nbt).tags.forEach((key, val) -> {
+                    JsonElement serialized = nbtToJson(val);
+                    if (serialized == null || serialized.isJsonNull()) {
+                        result.add(key, null);
+                    } else if (serialized.isJsonObject() || serialized.isJsonArray()) {
+                        result.add(key, serialized);
+                    } else {
+                        JsonPrimitive primitive = serialized.getAsJsonPrimitive();
+                        if (primitive.isString()) {
+                            result.addProperty(key, primitive.getAsString());
+                        } else if (primitive.isBoolean()) {
+                            result.addProperty(key, primitive.getAsBoolean());
+                        } else if (primitive.isNumber()) {
+                            result.addProperty(key, primitive.getAsNumber());
+                        } else {
+                            result.add(key, primitive);
+                        }
+                    }
+                });
+                return result;
+            }
+            case "TAG_Int_Array": { // Int Array
+                JsonArray result = new JsonArray();
+                ((IntArrayTag) nbt).forEach(val -> result.add(val.getAsInt()));
+                return result;
+            }
+            case "TAG_Long_Array": { // Long Array
+                JsonArray result = new JsonArray();
+                ((LongArrayTag) nbt).forEach(val -> result.add(val.getAsLong()));
+                return result;
+            }
+            default:
+                return null;
+        }
+    }
+
 }
