From 18af6fba41378c885546ca5c819a6cac809e0e2c Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 6 Dec 2016 22:22:14 -0500
Subject: [PATCH] Entity AI API

---
 .../paperdragon/api/CraftDAPI_Entity.java     | 135 ++++++++
 .../domnian/paperdragon/api/EntityAIApi.java  | 297 ++++++++++++++++++
 .../minecraft/server/AttributesAccessor.java  |   1 +
 .../java/net/minecraft/server/Entity.java     |  18 +-
 .../net/minecraft/server/EntityAnimal.java    |   2 +-
 .../net/minecraft/server/EntityBlaze.java     |  27 +-
 .../net/minecraft/server/EntityCreature.java  |   1 +
 .../minecraft/server/EntityEnderSignal.java   |  22 +-
 .../net/minecraft/server/EntityGhast.java     |   3 +-
 .../minecraft/server/EntityGoalAccessor.java  |  20 ++
 .../java/net/minecraft/server/EntityItem.java |   3 +-
 .../net/minecraft/server/EntityLiving.java    |  13 +-
 .../net/minecraft/server/EntitySpider.java    |   4 +
 .../java/net/minecraft/server/EntityWolf.java |   2 +
 .../server/PathfinderGoalArrowAttack.java     |   8 +-
 .../server/PathfinderGoalBowShoot.java        |   4 +-
 .../server/PathfinderGoalFleeSun.java         |   4 +-
 .../minecraft/server/PathfinderGoalPanic.java |   3 +-
 .../server/PathfinderGoalSelector.java        |   6 +-
 .../server/PathfinderGoalWrapped.java         |   2 +-
 .../net/minecraft/server/WorldServer.java     |   3 +-
 .../bukkit/craftbukkit/entity/CraftBlaze.java |  18 ++
 .../craftbukkit/entity/CraftEnderSignal.java  |   3 +-
 .../bukkit/craftbukkit/entity/CraftGhast.java |   9 +
 .../java/org/spigotmc/ActivationRange.java    |   1 +
 25 files changed, 580 insertions(+), 29 deletions(-)
 create mode 100644 src/main/java/com/domnian/paperdragon/api/EntityAIApi.java
 create mode 100644 src/main/java/net/minecraft/server/EntityGoalAccessor.java

diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
index 1e903fe5c..a996b3c91 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
@@ -23,9 +23,21 @@
 
 package com.domnian.paperdragon.api;
 
+import com.destroystokyo.paper.entity.RangedEntity;
+import org.bukkit.entity.Mob;
 import net.minecraft.server.EntityTasksHandler;
+import net.minecraft.server.EntityWolf;
+import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftSpider;
+import org.bukkit.craftbukkit.entity.CraftWolf;
+import org.bukkit.entity.Animals;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.Spider;
+import org.bukkit.entity.Wolf;
 
 public class CraftDAPI_Entity implements DAPI_Entity {
 
@@ -39,4 +51,127 @@ public class CraftDAPI_Entity implements DAPI_Entity {
     public void cancelTasks(Entity entity) {
         ((CraftEntity) entity).getHandle().entityTasks.clear();
     }
+
+    @Override
+    public boolean isEntityDisabled(Entity entity) {
+        return EntityAIApi.isEntityDisabled(entity);
+    }
+
+    @Override
+    public void setItemCanDespawn(Item item, boolean canDespawn) {
+        EntityAIApi.setItemCanDespawn(item, canDespawn);
+    }
+
+    @Override
+    public void setDisabledEntity(Entity entity, boolean disabled) {
+        EntityAIApi.setDisabledEntity(entity, disabled);
+    }
+
+    @Override
+    public int getLove(Animals animal) {
+        return EntityAIApi.getLove(animal);
+    }
+
+    @Override
+    public void setLove(Animals animal, int love) {
+        EntityAIApi.setLove(animal, love);
+    }
+
+    @Override
+    public void setFireProof(Mob entity, boolean flag) {
+        EntityAIApi.setFireProof(entity, flag);
+    }
+
+    @Override
+    public void setFirePanicProof(Mob entity, boolean flag) {
+        EntityAIApi.setFirePanicProof(entity, flag);
+    }
+
+    @Override
+    public void makeAggressive(Creature creature, float range) {
+        EntityAIApi.makeAggressive(creature, range);
+    }
+
+    @Override
+    public void makeAggressiveDuringDay(Spider spider, boolean attack) {
+        ((CraftSpider) spider).getHandle().attackDuringDay = attack;
+    }
+
+    @Override
+    public boolean isAggressive(Creature creature) {
+        return EntityAIApi.isAggressive(creature);
+    }
+
+    @Override
+    public void makePeaceful(Mob entity) {
+        EntityAIApi.makePeaceful(entity);
+    }
+
+    @Override
+    public void addGoalByName(Mob entity, String goalName, boolean isTargetGoal, int tickRate, Class<?>[] argClasses, Object... args) {
+        EntityAIApi.addGoalByName(entity, goalName, isTargetGoal, tickRate, argClasses, args);
+    }
+
+    @Override
+    public void removeGoalByName(Mob entity, String goalName) {
+        EntityAIApi.removeGoalByName(entity, goalName);
+    }
+
+    @Override
+    public void setEntitySize(Entity entity, float width, float height) {
+        EntityAIApi.setEntitySize(entity, width, height);
+    }
+
+    @Override
+    public void setTargetRange(Mob entity, float range) {
+        EntityAIApi.setTargetRange(entity, range);
+    }
+
+    @Override
+    public void setRangedAttackDistance(RangedEntity monster, float range) {
+        EntityAIApi.setRangedAttackDistance(monster, range);
+    }
+
+    @Override
+    public void setRangedAttackSpeed(RangedEntity monster, Integer min, Integer max) {
+        EntityAIApi.setRangedAttackSpeed(monster, min, max);
+    }
+
+    @Override
+    public void setAlwaysAngry(Wolf wolf, boolean alwaysAngry) {
+        EntityWolf entity = ((CraftWolf) wolf).getHandle();
+        entity.alwaysAngry = alwaysAngry;
+        if (alwaysAngry) {
+            entity.setAngry(true);
+        }
+    }
+
+    @Override
+    public void setEntityMaxPathfindingRange(Mob entity, float range) {
+        EntityAIApi.setEntityMaxPathfindingRange(entity, range);
+    }
+
+    @Override
+    public void respawnEntity(Entity entity) {
+        EntityAIApi.respawnEntity(entity);
+    }
+
+    @Override
+    public void setEnderSignalSpeed(EnderSignal enderSignal, double speed) {
+        EntityAIApi.setEnderSignalSpeed(enderSignal, speed);
+    }
+    public void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        EntityAIApi.setEnderSignalDestination(enderSignal, target);
+    }
+
+    @Override
+    public void setEnderSignalLife(EnderSignal enderSignal, int lifeTime) {
+        EntityAIApi.setEnderSignalLife(enderSignal, lifeTime);
+    }
+
+    @Override
+    public int getEnderSignalLife(EnderSignal enderSignal) {
+        return EntityAIApi.getEnderSignalLife(enderSignal);
+    }
+
 }
diff --git a/src/main/java/com/domnian/paperdragon/api/EntityAIApi.java b/src/main/java/com/domnian/paperdragon/api/EntityAIApi.java
new file mode 100644
index 000000000..7c6cc330d
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/EntityAIApi.java
@@ -0,0 +1,297 @@
+package com.domnian.paperdragon.api;
+
+import com.destroystokyo.paper.entity.RangedEntity;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.entity.Mob;
+import com.domnian.paperdragon.api.attributes.Attribute;
+import com.domnian.paperdragon.api.meta.Meta;
+import com.domnian.paperdragon.api.meta.MetaKey.PersistentKey;
+import net.minecraft.server.*;
+import net.minecraft.server.Entity;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.*;
+import org.bukkit.entity.*;
+import org.bukkit.entity.Item;
+
+import java.lang.reflect.Constructor;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+public final class EntityAIApi {
+
+    public static final PersistentKey ENTITY_AGGRESSIVE_RANGE_KEY = Meta.createPersistentKey("entityAggressiveRange");
+
+    private EntityAIApi() {
+    }
+
+
+    private static EntityInsentient getInsentientHandle(Mob entity) {
+        return (EntityInsentient) (((CraftEntity) entity).getHandle());
+    }
+    /**
+     * Is this entity blocked from ticking
+     * @param entity
+     * @return
+     */
+    public static boolean isEntityDisabled(org.bukkit.entity.Entity entity) {
+        return ((CraftEntity) entity).getHandle().isDisabled;
+    }
+    public static void setItemCanDespawn(Item item, boolean canDespawn) {
+        final Entity handle = ((CraftEntity) item).getHandle();
+        ((net.minecraft.server.EntityItem) handle).canDespawn = canDespawn;
+    }
+
+    /**
+     * Disables Ticking on an Entity
+     * @param entity
+     * @param disabled
+     */
+    public static void setDisabledEntity(org.bukkit.entity.Entity entity, boolean disabled) {
+        ((CraftEntity) entity).getHandle().isDisabled = disabled;
+    }
+    public static int getLove(Animals animal) {
+        return ((CraftAnimals) animal).getHandle().getLove();
+    }
+    public static void setLove(Animals animal, int love) {
+        ((CraftAnimals) animal).getHandle().setLove(love);
+    }
+    public static void setFireProof(Mob entity, boolean flag) {
+        getInsentientHandle(entity).fireProof = flag;
+    }
+    public static void setFirePanicProof(Mob entity, boolean flag) {
+        getInsentientHandle(entity).firePanicProof = flag;
+    }
+
+
+    public static void processEntityAddToWorld(Entity entity) {
+        if (entity instanceof EntityCreature) {
+            Number range =
+                Meta.getEntityMeta(entity.getBukkitEntity(), ENTITY_AGGRESSIVE_RANGE_KEY);
+            if (range != null) {
+                makeAggressive((org.bukkit.entity.Creature) entity.getBukkitEntity(), range.floatValue());
+            }
+        }
+    }
+
+    public static boolean isAggressive(Creature creature) {
+        EntityCreature entity = ((CraftCreature) creature).getHandle();
+        return entity.markedAggressive;
+    }
+
+    public static void makeAggressive(Creature creature, float range) {
+        EntityCreature handle = ((CraftCreature)creature).getHandle();
+        if (!handle.markedAggressive) {
+            handle.goalSelector.addGoal(2, new PathfinderGoalMeleeAttack(handle, 1.0F, false));
+            handle.targetSelector.addGoal(2, new PathfinderGoalNearestAttackableTarget(handle, EntityHuman.class, true));
+            Meta.setEntityMeta(creature, ENTITY_AGGRESSIVE_RANGE_KEY, range);
+            setTargetRange(creature, range);
+            handle.markedAggressive = true;
+        }
+    }
+
+    public static void makePeaceful(Mob entity) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+
+        getGoalSets(handle).forEach(set -> set.removeIf(o -> {
+            return EntityGoalAccessor.isHostileGoal(o.getGoal());
+        }));
+    }
+
+    public static void removeGoalByName(Mob entity, String goalName) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        String nms = handle.getClass().getPackage().getName() + ".";
+        getGoalSets(handle).forEach(set -> set.removeIf(o -> {
+            return o.getGoal().getClass().getName().replaceAll(nms, "").equalsIgnoreCase(goalName);
+        }));
+    }
+
+    public static void addGoalByName(Mob entity, String goalName, boolean isTargetGoal, int tickRate, Class<?>[] argClasses, Object... args) {
+        final EntityInsentient handle = getInsentientHandle(entity);
+        String nms = handle.getClass().getPackage().getName();
+        String className = nms + "." + goalName;
+        try {
+            PathfinderGoal goal = getPathfinderGoal(handle, argClasses, className, args);
+            if (goal == null) {
+                MinecraftServer.LOGGER.error("Could not create goal for " + className);
+                return;
+            }
+            if (isTargetGoal) {
+                handle.targetSelector.addGoal(tickRate, goal);
+            } else {
+                handle.goalSelector.addGoal(tickRate, goal);
+            }
+        } catch (Exception e) {
+            MinecraftServer.LOGGER.error("Error adding goal by name");
+            e.printStackTrace();
+        }
+    }
+
+    static PathfinderGoal getPathfinderGoal(EntityLiving handle, Class<?>[] argClasses, String className, Object[] args) throws Exception {
+        Class<?> aClass = Class.forName(className);
+        CTOR:
+        for (Constructor<?> ctor : aClass.getDeclaredConstructors()) {
+            Class<?>[] parameterTypes = ctor.getParameterTypes();
+            if ((args.length +1) != parameterTypes.length) {
+                continue;
+            }
+            if (!parameterTypes[0].isAssignableFrom(handle.getClass())) {
+                continue;
+            }
+            for (int i = 1; i < parameterTypes.length; i++) {
+                Class<?> pCls = parameterTypes[i];
+                // TODO: Map argClasses from CB counterparts to NMS such as LivingEntity.class => EntityLiving.class
+                if (!pCls.isAssignableFrom(argClasses[i-1])) {
+                    continue CTOR;
+                }
+            }
+            Object[] newArgs = new Object[args.length+1];
+            System.arraycopy(args, 0, newArgs, 1, args.length);
+            newArgs[0] = handle;
+            return (PathfinderGoal) ctor.newInstance(newArgs);
+        }
+        return null;
+    }
+
+    private static List<Set<PathfinderGoalWrapped>> getGoalSets(EntityInsentient entity) {
+        List<Set<PathfinderGoalWrapped>> check = new ArrayList();
+        check.add(entity.goalSelector.getTasks());
+        check.add(entity.goalSelector.getExecutingTasks());
+        check.add(entity.targetSelector.getTasks());
+        check.add(entity.targetSelector.getExecutingTasks());
+        return check;
+    }
+
+    private static void removeGoal(EntityInsentient entity, PathfinderGoalWrapped o) {
+        entity.goalSelector.getTasks().remove(o);
+        entity.goalSelector.getExecutingTasks().remove(o);
+        entity.targetSelector.getTasks().remove(o);
+        entity.targetSelector.getExecutingTasks().remove(o);
+    }
+
+    public static void setEntitySize(org.bukkit.entity.Entity entity, float width, float height) {
+        ((CraftEntity)entity).getHandle().setSize(width, height);
+    }
+
+    public static void setTargetRange(Mob entity, float range) {
+        DragonAPI.attributes.setAttribute(entity, Attribute.TARGET_RANGE, range);
+    }
+
+    public static void setRangedAttackDistance(RangedEntity monster, float range) {
+        setTargetRange(monster, range);
+        EntityInsentient entity = (EntityInsentient) ((CraftEntity) monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                ((PathfinderGoalArrowAttack) goal).setDist(range);
+            } else if (entity instanceof Monster && goal instanceof PathfinderGoalBowShoot) {
+                ((PathfinderGoalBowShoot) goal).setDist(range);
+            }
+        }));
+    }
+
+    public static void setRangedAttackSpeed(RangedEntity monster, Integer min, Integer max) {
+        if (min == null && max == null) {
+            return;
+        }
+        EntityInsentient entity = (EntityInsentient) ((CraftEntity) monster).getHandle();
+        getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            PathfinderGoal goal = o.getGoal();
+            if (goal instanceof PathfinderGoalArrowAttack) {
+                if (min != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMinTime(min);
+                }
+                if (max != null) {
+                    ((PathfinderGoalArrowAttack) goal).setMaxTime(max);
+                }
+            } else if (entity instanceof Monster && goal instanceof PathfinderGoalBowShoot) {
+                int speed = min != null && max != null ? Math.min(min, max) : (min != null ? min : max);
+                ((PathfinderGoalBowShoot) goal).setSpeed(speed);
+            }
+        }));
+    }
+    public static void setEntityMaxPathfindingRange(Mob entity, float range) {
+        DragonAPI.attributes.setAttribute(entity, Attribute.FOLLOW_RANGE, range);
+    }
+
+    public static void respawnEntity(org.bukkit.entity.Entity entity) {
+        CraftEntity craft = (CraftEntity) entity;
+        Entity newHandle = craft.getHandle().teleportTo(
+                ((CraftWorld)craft.getWorld()).getHandle().getWorldProvider().getDimensionManager(),
+                MCUtil.toBlockPosition(entity.getLocation())
+        );
+        if (newHandle != null) {
+            craft.setHandle(newHandle);
+        }
+    }
+
+    public static void setEnderSignalDestination(EnderSignal enderSignal, Location target) {
+        if (enderSignal != null && target != null) {
+            if (target.getWorld() != enderSignal.getWorld()) {
+                throw new IllegalStateException("Worlds must be the same.");
+            }
+            EntityEnderSignal handle = ((CraftEnderSignal) enderSignal).getHandle();
+            handle.exactTarget = true;
+            handle.setSignalTarget(MCUtil.toBlockPosition(target));
+        }
+    }
+    public static void setEnderSignalSpeed(EnderSignal enderSignal, double speed) {
+        if (enderSignal != null) {
+            ((CraftEnderSignal) enderSignal).getHandle().speed = speed / 10000D;
+        }
+    }
+
+    public static void setEnderSignalLife(EnderSignal enderSignal, int lifeTime) {
+        if (enderSignal != null) {
+            ((CraftEnderSignal) enderSignal).getHandle().setLifeTime(lifeTime);
+        }
+    }
+
+    public static int getEnderSignalLife(EnderSignal enderSignal) {
+        if (enderSignal != null) {
+            return ((CraftEnderSignal) enderSignal).getHandle().getLifeTime();
+        }
+        return 0;
+    }
+
+    private static PathEntity getPathEntity(Mob entity) {
+        return getInsentientHandle(entity).getNavigation().getPathEntity();
+    }
+
+
+    private static PathEntity getPathEntity(Location loc, EntityInsentient handle) {
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (loc != null) {
+            path = handle.getNavigation().calculateDestination(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ());
+        }
+
+        handle.onGround = onGround;
+        return path;
+    }
+
+
+    private static PathEntity getPathEntity(LivingEntity target, EntityInsentient handle) {
+        final boolean onGround = handle.onGround;
+        handle.onGround = true;
+        PathEntity path = null;
+        if (target != null) {
+            path = handle.getNavigation().calculateDestination(((CraftEntity) target).getHandle());
+        }
+
+        handle.onGround = onGround;
+        return path;
+    }
+
+    private static Location getFinalLocation(Mob entity, PathEntity pathEntity) {
+        if (pathEntity == null) {
+            return null;
+        }
+        final PathPoint pathPoint = pathEntity.getFinalPoint();
+        if (pathPoint == null) {
+            return null;
+        }
+        return new Location(entity.getWorld(), pathPoint.a, pathPoint.b, pathPoint.c);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AttributesAccessor.java b/src/main/java/net/minecraft/server/AttributesAccessor.java
index 193b5b8e6..014329d98 100644
--- a/src/main/java/net/minecraft/server/AttributesAccessor.java
+++ b/src/main/java/net/minecraft/server/AttributesAccessor.java
@@ -38,6 +38,7 @@ public final class AttributesAccessor {
     }
 
     public static void initializeAttributes(EntityLiving entity, AttributeMapBase map) {
+        entity.getAttributeMap().registerAttribute(GenericAttributes.ATTACK_DAMAGE).setValue(2.0D);
         if (entity instanceof EntityInsentient) {
             map.registerAttribute(targetRange);
             if (entity instanceof Wither) {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 5892772fc..69fbfbe87 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -149,6 +149,9 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     protected boolean inLava;
     public int noDamageTicks;
     protected boolean justCreated;
+    public boolean fireProof; // PaperDragon
+    public boolean firePanicProof; // PaperDragon
+    public boolean isDisabled = false; // PaperDragon
     protected final DataWatcher datawatcher;
     protected static final DataWatcherObject<Byte> T = DataWatcher.a(Entity.class, DataWatcherRegistry.a);
     private static final DataWatcherObject<Integer> AIR_TICKS = DataWatcher.a(Entity.class, DataWatcherRegistry.b);
@@ -181,7 +184,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     private boolean aF;
     private final double[] aG;
     private long aH;
-    private EntitySize size;
+    private EntitySize size;public void setSize(float width, float height) { size = EntitySize.b(width, height); } // PaperDragon
     private float headHeight;
     // CraftBukkit start
     public boolean persist = true;
@@ -365,6 +368,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void setPosition(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // PaperDragon
         this.setPositionRaw(d0, d1, d2);
         float f = this.size.width / 2.0F;
         float f1 = this.size.height;
@@ -395,6 +399,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     // CraftBukkit end
 
     public void entityBaseTick() {
+        if (isDisabled) { return; } // PaperDragon
         this.world.getMethodProfiler().enter("entityBaseTick");
         if (this.isPassenger() && this.getVehicle().dead) {
             this.stopRiding();
@@ -551,6 +556,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void move(EnumMoveType enummovetype, Vec3D vec3d) {
+        if (isDisabled) { return; } // PaperDragon
         if (this.noclip) {
             this.a(this.getBoundingBox().b(vec3d));
             this.recalcPosition();
@@ -1092,7 +1098,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public final boolean isFireProof() {
-        return this.getEntityType().c();
+        return this.getEntityType().c() || this.fireProof;
     }
 
     public boolean b(float f, float f1) {
@@ -1330,6 +1336,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void setLocation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // PaperDragon
         double d3 = MathHelper.a(d0, -3.0E7D, 3.0E7D);
         double d4 = MathHelper.a(d2, -3.0E7D, 3.0E7D);
 
@@ -1349,6 +1356,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void setPositionRotation(double d0, double d1, double d2, float f, float f1) {
+        if (isDisabled) { return; } // PaperDragon
         this.f(d0, d1, d2);
         this.yaw = f;
         this.pitch = f1;
@@ -1396,6 +1404,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     public void pickup(EntityHuman entityhuman) {}
 
     public void collide(Entity entity) {
+        if (isDisabled) { return; } // PaperDragon
         if (!this.isSameVehicle(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX() - this.locX();
@@ -1432,6 +1441,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void h(double d0, double d1, double d2) {
+        if (isDisabled) { return; } // PaperDragon
         this.setMot(this.getMot().add(d0, d1, d2));
         this.impulse = true;
     }
@@ -1441,6 +1451,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
+        if (isDisabled) { return false; } // PaperDragon
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
@@ -2552,7 +2563,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public boolean isInvulnerable(DamageSource damagesource) {
-        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.v();
+        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.v() && !isDisabled; // PaperDragon - add && !isDisabled
     }
 
     public boolean isInvulnerable() {
@@ -2971,6 +2982,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return false;
     }
 
+    protected void processEnchantsForAttack(EntityLiving entityliving, Entity entity) { this.a(entityliving, entity); } // PaperDragon - OBF HELPER
     protected void a(EntityLiving entityliving, Entity entity) {
         if (entity instanceof EntityLiving) {
             EnchantmentManager.a((EntityLiving) entity, (Entity) entityliving);
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index 013db0c3a..3a7165885 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -6,7 +6,7 @@ import javax.annotation.Nullable;
 
 public abstract class EntityAnimal extends EntityAgeable {
 
-    public int loveTicks;
+    public int loveTicks;public void setLove(int love) { this.loveTicks = love;} public int getLove() { return this.loveTicks; } // PaperDragon - Getter & Setter
     public UUID breedCause;
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
 
diff --git a/src/main/java/net/minecraft/server/EntityBlaze.java b/src/main/java/net/minecraft/server/EntityBlaze.java
index 5b1d2c7f5..3c79647c6 100644
--- a/src/main/java/net/minecraft/server/EntityBlaze.java
+++ b/src/main/java/net/minecraft/server/EntityBlaze.java
@@ -8,6 +8,25 @@ public class EntityBlaze extends EntityMonster {
     private int c;
     private static final DataWatcherObject<Byte> d = DataWatcher.a(EntityBlaze.class, DataWatcherRegistry.a);
 
+    // PaperDragon start
+    int numFireballs = 4;
+    int timeBetweenFireballs = 6;
+    public void setFireballs(int num) {
+        this.numFireballs = num;
+    }
+    public int getNumFireballs() {
+        return this.numFireballs;
+    }
+
+    public int getTimeBetweenFireballs() {
+        return timeBetweenFireballs;
+    }
+
+    public void setTimeBetweenFireballs(int timeBetweenFireballs) {
+        this.timeBetweenFireballs = timeBetweenFireballs;
+    }
+    // PaperDragon end
+
     public EntityBlaze(EntityTypes<? extends EntityBlaze> entitytypes, World world) {
         super(entitytypes, world);
         this.a(PathType.WATER, -1.0F);
@@ -24,7 +43,7 @@ public class EntityBlaze extends EntityMonster {
         this.goalSelector.a(7, new PathfinderGoalRandomStrollLand(this, 1.0D, 0.0F));
         this.goalSelector.a(8, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
-        this.targetSelector.a(1, (new PathfinderGoalHurtByTarget(this, new Class[0])).a());
+        this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this)); // PaperDragon - Decompile Fix
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget<>(this, EntityHuman.class, true));
     }
 
@@ -198,8 +217,8 @@ public class EntityBlaze extends EntityMonster {
                         if (this.b == 1) {
                             this.c = 60;
                             this.a.r(true);
-                        } else if (this.b <= 4) {
-                            this.c = 6;
+                        } else if (this.b <= this.a.numFireballs) { // PaperDragon
+                            this.c = this.a.timeBetweenFireballs; // PaperDragon
                         } else {
                             this.c = 100;
                             this.b = 0;
@@ -215,7 +234,9 @@ public class EntityBlaze extends EntityMonster {
                                 EntitySmallFireball entitysmallfireball = new EntitySmallFireball(this.a.world, this.a, d1 + this.a.getRandom().nextGaussian() * (double) f, d2, d3 + this.a.getRandom().nextGaussian() * (double) f);
 
                                 entitysmallfireball.setPosition(entitysmallfireball.locX(), this.a.e(0.5D) + 0.5D, entitysmallfireball.locZ());
+                                if (new com.domnian.paperdragon.events.BlazeLaunchFireballEvent((org.bukkit.entity.Blaze) this.a.getBukkitEntity(), (org.bukkit.entity.SmallFireball) entitysmallfireball.getBukkitEntity()).callEvent()) { // PaperDragon
                                 this.a.world.addEntity(entitysmallfireball);
+                                } else { entitysmallfireball.die(); }// PaperDragon
                             }
                         }
                     }
diff --git a/src/main/java/net/minecraft/server/EntityCreature.java b/src/main/java/net/minecraft/server/EntityCreature.java
index 4eda13075..87d7e8e45 100644
--- a/src/main/java/net/minecraft/server/EntityCreature.java
+++ b/src/main/java/net/minecraft/server/EntityCreature.java
@@ -9,6 +9,7 @@ public abstract class EntityCreature extends EntityInsentient {
     public org.bukkit.craftbukkit.entity.CraftCreature getBukkitCreature() { return (org.bukkit.craftbukkit.entity.CraftCreature) super.getBukkitEntity(); } // Paper
     public BlockPosition movingTarget = null; public BlockPosition getMovingTarget() { return movingTarget; } // Paper
 
+    public boolean markedAggressive = false; // PaperDragon
     protected EntityCreature(EntityTypes<? extends EntityCreature> entitytypes, World world) {
         super(entitytypes, world);
     }
diff --git a/src/main/java/net/minecraft/server/EntityEnderSignal.java b/src/main/java/net/minecraft/server/EntityEnderSignal.java
index c13abc7e0..ffa9dfa45 100644
--- a/src/main/java/net/minecraft/server/EntityEnderSignal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderSignal.java
@@ -9,6 +9,18 @@ public class EntityEnderSignal extends Entity {
     public int despawnTimer;
     public boolean shouldDropItem;
 
+    // PaperDragon start
+    private int lifeTime = 80;
+    public void setLifeTime(int lifeTime) {
+        this.lifeTime = lifeTime;
+    }
+    public int getLifeTime() {
+        return this.lifeTime;
+    }
+    public double speed = 0.0025D;
+    public boolean exactTarget = false;
+    // PaperDragon end
+
     public EntityEnderSignal(EntityTypes<? extends EntityEnderSignal> entitytypes, World world) {
         super(entitytypes, world);
     }
@@ -21,7 +33,7 @@ public class EntityEnderSignal extends Entity {
 
     public void b(ItemStack itemstack) {
         if (itemstack.getItem() != Items.ENDER_EYE || itemstack.hasTag()) {
-            this.getDataWatcher().set(EntityEnderSignal.b, SystemUtils.a((Object) itemstack.cloneItemStack(), (itemstack1) -> {
+            this.getDataWatcher().set(EntityEnderSignal.b, SystemUtils.a(itemstack.cloneItemStack(), (itemstack1) -> { // PaperDragon - Decompile Fix
                 itemstack1.setCount(1);
             }));
         }
@@ -43,6 +55,7 @@ public class EntityEnderSignal extends Entity {
         this.getDataWatcher().register(EntityEnderSignal.b, ItemStack.a);
     }
 
+    public void setSignalTarget(BlockPosition pos) { a(pos); } // PaperDragon - OBF HELPER
     public void a(BlockPosition blockposition) {
         double d0 = (double) blockposition.getX();
         int i = blockposition.getY();
@@ -51,6 +64,7 @@ public class EntityEnderSignal extends Entity {
         double d3 = d1 - this.locZ();
         float f = MathHelper.sqrt(d2 * d2 + d3 * d3);
 
+        if (exactTarget) f = 0; // PaperDragon
         if (f > 12.0F) {
             this.targetX = this.locX() + d2 / (double) f * 12.0D;
             this.targetZ = this.locZ() + d3 / (double) f * 12.0D;
@@ -97,9 +111,10 @@ public class EntityEnderSignal extends Entity {
         if (!this.world.isClientSide) {
             double d3 = this.targetX - d0;
             double d4 = this.targetZ - d2;
-            float f1 = (float) Math.sqrt(d3 * d3 + d4 * d4);
+            double distY = this.targetY - d1; // PaperDragon
+            float f1 = (float) Math.sqrt(d3 * d3 + d4 * d4 + (exactTarget ? distY * distY : 0)); // PaperDragon
             float f2 = (float) MathHelper.d(d4, d3);
-            double d5 = MathHelper.d(0.0025D, (double) f, (double) f1);
+            double d5 = MathHelper.d(speed, (double) f, (double) f1); // PaperDragon
             double d6 = vec3d.y;
 
             if (f1 < 1.0F) {
@@ -127,6 +142,7 @@ public class EntityEnderSignal extends Entity {
             this.setPosition(d0, d1, d2);
             ++this.despawnTimer;
             if (this.despawnTimer > 80 && !this.world.isClientSide) {
+                if (!(new com.domnian.paperdragon.events.EnderSignalArriveEvent((org.bukkit.entity.EnderSignal) this.getBukkitEntity()).callEvent())) {return;} // PaperDragon
                 this.a(SoundEffects.ENTITY_ENDER_EYE_DEATH, 1.0F, 1.0F);
                 this.die();
                 if (this.shouldDropItem) {
diff --git a/src/main/java/net/minecraft/server/EntityGhast.java b/src/main/java/net/minecraft/server/EntityGhast.java
index e1c2540d1..e20133b78 100644
--- a/src/main/java/net/minecraft/server/EntityGhast.java
+++ b/src/main/java/net/minecraft/server/EntityGhast.java
@@ -7,6 +7,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
     private static final DataWatcherObject<Boolean> b = DataWatcher.a(EntityGhast.class, DataWatcherRegistry.i);
     private int c = 1;
+    public int fireballCooldown = 40; // PaperDragon
 
     public EntityGhast(EntityTypes<? extends EntityGhast> entitytypes, World world) {
         super(entitytypes, world);
@@ -167,7 +168,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
                     entitylargefireball.bukkitYield = entitylargefireball.yield = this.ghast.getPower();
                     entitylargefireball.setPosition(this.ghast.locX() + vec3d.x * 4.0D, this.ghast.e(0.5D) + 0.5D, entitylargefireball.locZ() + vec3d.z * 4.0D);
                     world.addEntity(entitylargefireball);
-                    this.a = -40;
+                    this.a = -ghast.fireballCooldown; // PaperDragon
                 }
             } else if (this.a > 0) {
                 --this.a;
diff --git a/src/main/java/net/minecraft/server/EntityGoalAccessor.java b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
new file mode 100644
index 000000000..d0ee7f304
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityGoalAccessor.java
@@ -0,0 +1,20 @@
+package net.minecraft.server;
+
+public final class EntityGoalAccessor {
+    private EntityGoalAccessor() {
+    }
+
+    public static boolean isHostileGoal(PathfinderGoal goal) {
+        if (goal instanceof PathfinderGoalMeleeAttack ||
+            goal instanceof PathfinderGoalOcelotAttack ||
+            goal instanceof EntityBlaze.PathfinderGoalBlazeFireball ||
+            goal instanceof PathfinderGoalArrowAttack ||
+            goal instanceof PathfinderGoalMoveThroughVillage ||
+            goal instanceof PathfinderGoalBreakDoor ||
+            goal instanceof PathfinderGoalNearestAttackableTarget ||
+            goal instanceof PathfinderGoalHurtByTarget) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 2926fbb95..5cfc81c55 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -16,6 +16,7 @@ public class EntityItem extends Entity {
 
     private static final DataWatcherObject<ItemStack> ITEM = DataWatcher.a(EntityItem.class, DataWatcherRegistry.g);
     public int age;
+    public boolean canDespawn = true; // PaperDragon
     public int pickupDelay;
     private int f;
     private UUID thrower;
@@ -129,7 +130,7 @@ public class EntityItem extends Entity {
                 }
             }
 
-            if (!this.world.isClientSide && this.age >= this.getDespawnRate()) { // Spigot // Paper
+            if (canDespawn && !this.world.isClientSide && this.age >= this.getDespawnRate()) { // Spigot // Paper // PaperDragon
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index f2ada6b94..a6fbd5aef 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -435,6 +435,7 @@ public abstract class EntityLiving extends Entity {
         return this.bA;
     }
 
+    public void setLastAttacker(Entity entity) { this.z(entity); } // PaperDragon - OBF HELPER
     public void z(Entity entity) {
         if (entity instanceof EntityLiving) {
             this.bz = (EntityLiving) entity;
@@ -2326,8 +2327,16 @@ public abstract class EntityLiving extends Entity {
     }
 
     public boolean B(Entity entity) {
-        this.z(entity);
-        return false;
+        // PaperDragon start - make all mobs able to attack
+        boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) ((int) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue()));
+
+        if (flag) {
+            this.processEnchantsForAttack(this, entity);
+            this.setLastAttacker(entity);
+        }
+
+        return flag;
+        // PaperDragon end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index d02db5659..511009a9f 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -152,6 +152,8 @@ public class EntitySpider extends EntityMonster {
         return 0.65F;
     }
 
+    public boolean attackDuringDay = false; // PaperDragon
+
     static class PathfinderGoalSpiderNearestAttackableTarget<T extends EntityLiving> extends PathfinderGoalNearestAttackableTarget<T> {
 
         public PathfinderGoalSpiderNearestAttackableTarget(EntitySpider entityspider, Class<T> oclass) {
@@ -161,6 +163,7 @@ public class EntitySpider extends EntityMonster {
         @Override
         public boolean a() {
             float f = this.e.aI();
+            if (((EntitySpider)this.e).attackDuringDay) f = 1.0F; // PaperDragon
 
             return f >= 0.5F ? false : super.a();
         }
@@ -180,6 +183,7 @@ public class EntitySpider extends EntityMonster {
         @Override
         public boolean b() {
             float f = this.a.aI();
+            if (((EntitySpider)this.a).attackDuringDay) f = 1.0F; // PaperDragon
 
             if (f >= 0.5F && this.a.getRandom().nextInt(100) == 0) {
                 this.a.setGoalTarget((EntityLiving) null);
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index eec1e26b6..d9a0e54fc 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -29,6 +29,7 @@ public class EntityWolf extends EntityTameableAnimal {
         super(entitytypes, world);
         this.setTamed(false);
     }
+    public boolean alwaysAngry = false; // PaperDragon
 
     @Override
     protected void initPathfinder() {
@@ -369,6 +370,7 @@ public class EntityWolf extends EntityTameableAnimal {
 
     public void setAngry(boolean flag) {
         byte b0 = (Byte) this.datawatcher.get(EntityWolf.bw);
+        if (alwaysAngry) flag = true; // PaperDragon
 
         if (flag) {
             this.datawatcher.set(EntityWolf.bw, (byte) (b0 | 2));
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
index 2206d1833..a7f6c7010 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalArrowAttack.java
@@ -10,10 +10,10 @@ public class PathfinderGoalArrowAttack extends PathfinderGoal {
     private int d;
     private final double e;
     private int f;
-    private final int g;
-    private final int h;
-    private final float i;
-    private final float j;
+    public int g;public void setMinTime(int time) { this.g = time; } // PaperDragon - OBF HELPER - min ranged time
+    public int h;public void setMaxTime(int time) { this.h = time; } // PaperDragon - OBF HELPER - max ranged time
+    public float i;public void setDist(float range) { this.i = range; j = range*range; } // PaperDragon - OBF HELPER - max ranged dist
+    public float j; // PaperDragon - max ranged dist square
 
     public PathfinderGoalArrowAttack(IRangedEntity irangedentity, double d0, int i, float f) {
         this(irangedentity, d0, i, i, f);
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBowShoot.java b/src/main/java/net/minecraft/server/PathfinderGoalBowShoot.java
index 075595c3a..d998f4587 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBowShoot.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBowShoot.java
@@ -6,8 +6,8 @@ public class PathfinderGoalBowShoot<T extends EntityMonster & IRangedEntity> ext
 
     private final T a;
     private final double b;
-    private int c;
-    private final float d;
+    private int c;public void setSpeed(int speed) { this.c = speed; } // PaperDragon - OBF HELPER
+    private float d;public float getDistSq() { return d; } public void setDist(float range) { this.d = range*range; } // PaperDragon - OBF HELPER - max ranged dist // PaperDragon - OBF HELPER - max ranged dist square
     private int e = -1;
     private int f;
     private boolean g;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java b/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
index 7881774e0..8852c4961 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalFleeSun.java
@@ -6,7 +6,7 @@ import javax.annotation.Nullable;
 
 public class PathfinderGoalFleeSun extends PathfinderGoal {
 
-    protected final EntityCreature a;
+    protected final EntityCreature a;EntityCreature getEntity() { return a; } // PaperDragon - OBF HELPER
     private double b;
     private double c;
     private double d;
@@ -22,7 +22,7 @@ public class PathfinderGoalFleeSun extends PathfinderGoal {
 
     @Override
     public boolean a() {
-        return this.a.getGoalTarget() != null ? false : (!this.f.isDay() ? false : (!this.a.isBurning() ? false : (!this.f.f(new BlockPosition(this.a)) ? false : (!this.a.getEquipment(EnumItemSlot.HEAD).isEmpty() ? false : this.g()))));
+        return this.a.getGoalTarget() != null ? false : (!this.f.isDay() ? false : ((this.getEntity().firePanicProof || !this.a.isBurning()) ? false : (!this.f.f(new BlockPosition(this.a.locX(), this.a.getBoundingBox().minY, this.a.locZ())) ? false : (!this.a.getEquipment(EnumItemSlot.HEAD).isEmpty() ? false : this.g())))); // PaperDragon
     }
 
     protected boolean g() {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
index c6a4df1c5..7753c17d2 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalPanic.java
@@ -5,7 +5,7 @@ import javax.annotation.Nullable;
 
 public class PathfinderGoalPanic extends PathfinderGoal {
 
-    protected final EntityCreature a;
+    protected final EntityCreature a;public EntityCreature getCreature() { return a; } // PaperDragon - OBF HELPER
     protected final double b;
     protected double c;
     protected double d;
@@ -19,6 +19,7 @@ public class PathfinderGoalPanic extends PathfinderGoal {
 
     @Override
     public boolean a() {
+        if (this.getCreature().firePanicProof) { return false; } // PaperDragon
         if (this.a.getLastDamager() == null && !this.a.isBurning()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index 935136771..58fcd27f7 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -23,8 +23,8 @@ public class PathfinderGoalSelector {
             return false;
         }
     };
-    private final Map<PathfinderGoal.Type, PathfinderGoalWrapped> c = new EnumMap(PathfinderGoal.Type.class);
-    private final Set<PathfinderGoalWrapped> d = Sets.newLinkedHashSet();private Set<PathfinderGoalWrapped> getTasks() { return d; }// Paper - OBFHELPER
+    private final Map<PathfinderGoal.Type, PathfinderGoalWrapped> c = new EnumMap(PathfinderGoal.Type.class);public Set<PathfinderGoalWrapped> getTasks() { return new java.util.HashSet<>(c.values()); }// PaperDragon - OBF HELPER
+    private final Set<PathfinderGoalWrapped> d = Sets.newLinkedHashSet();public Set<PathfinderGoalWrapped> getExecutingTasks() { return d; }// Paper - OBFHELPER // PaperDragon - private -> public, rename method
     private final GameProfilerFiller e;
     private final EnumSet<PathfinderGoal.Type> f = EnumSet.noneOf(PathfinderGoal.Type.class);
     private int g = 3;private int getTickRate() { return g; } // Paper - OBFHELPER
@@ -34,7 +34,7 @@ public class PathfinderGoalSelector {
         this.e = gameprofilerfiller;
     }
 
-    public void a(int i, PathfinderGoal pathfindergoal) {
+    public void addGoal(int i, PathfinderGoal pathfindergoal) { this.a(i, pathfindergoal); } public void a(int i, PathfinderGoal pathfindergoal) { // PaperDragon - OBF HELPER
         this.d.add(new PathfinderGoalWrapped(i, pathfindergoal));
     }
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalWrapped.java b/src/main/java/net/minecraft/server/PathfinderGoalWrapped.java
index 29657fed7..959602b6c 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalWrapped.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalWrapped.java
@@ -5,7 +5,7 @@ import javax.annotation.Nullable;
 
 public class PathfinderGoalWrapped extends PathfinderGoal {
 
-    private final PathfinderGoal a;
+    private final PathfinderGoal a;public PathfinderGoal getGoal() { return a; } // PaperDragon - OBF HELPER
     private final int b;
     private boolean c;
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 25bcce778..7683f13c8 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -758,7 +758,7 @@ public class WorldServer extends World {
             entity.f(entity.locX(), entity.locY(), entity.locZ());
             entity.lastYaw = entity.yaw;
             entity.lastPitch = entity.pitch;
-            if (entity.inChunk) {
+            if (entity.inChunk && !entity.isDisabled) { // PaperDragon
                 ++entity.ticksLived;
                 GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
@@ -1441,6 +1441,7 @@ public class WorldServer extends World {
             }
             // Paper end
             entity.shouldBeRemoved = false; // Paper - shouldn't be removed after being re-added
+            com.domnian.paperdragon.api.EntityAIApi.processEntityAddToWorld(entity); // PaperDragon
             new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index 089419ede..d65e75bb9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -24,4 +24,22 @@ public class CraftBlaze extends CraftMonster implements Blaze {
     public EntityType getType() {
         return EntityType.BLAZE;
     }
+
+    // PaperDragon start
+    public void setFireballs(int num) {
+        getHandle().setFireballs(num);
+    }
+
+    public int getNumFireballs() {
+        return getHandle().getNumFireballs();
+    }
+
+    public int getTimeBetweenFireballs() {
+        return getHandle().getTimeBetweenFireballs();
+    }
+
+    public void setTimeBetweenFireballs(int timeBetweenFireballs) {
+        getHandle().setTimeBetweenFireballs(timeBetweenFireballs);
+    }
+    // PaperDragon end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index d771fdc6e..cbbbfd86c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -34,8 +34,9 @@ public class CraftEnderSignal extends CraftEntity implements EnderSignal {
     }
 
     @Override
-    public void setTargetLocation(Location location) {
+    public void setTargetLocation(Location location, boolean exactTarget) { // PaperDragon
         Preconditions.checkArgument(getWorld().equals(location.getWorld()), "Cannot target EnderSignal across worlds");
+        getHandle().exactTarget = exactTarget; // PaperDragon
         getHandle().a(new BlockPosition(location.getX(), location.getY(), location.getZ()));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index cac82ce76..e8c35244f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -25,4 +25,13 @@ public class CraftGhast extends CraftFlying implements Ghast {
     public EntityType getType() {
         return EntityType.GHAST;
     }
+
+    // PaperDragon start
+    public int getFireballCooldown() {
+        return getHandle().fireballCooldown;
+    }
+    public void setFireballCooldown(int cooldown) {
+        getHandle().fireballCooldown = cooldown;
+    }
+    // PaperDragon end
 }
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 6e165a164..19d40704f 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -265,6 +265,7 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
+        if (entity.isDisabled) return true; // PaperDragon
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( !entity.inChunk || entity instanceof EntityFireworks ) {
             return true;
-- 
2.20.1.windows.1

