From 832a0ad08f9c7ede9bf0a9468cdb3ae2fbfe801f Mon Sep 17 00:00:00 2001
From: willies952002 <admin@domnian.com>
Date: Mon, 25 Dec 2017 22:08:32 -0500
Subject: [PATCH] Identifier API

Seems silly, but I want to have a common interface to represent an identity
but not have risk of 2 objects equalling each other.

Example: ChunkIdentifier and a ResidenceIdentifier are 2 ways to identify a context
but cant ever equal each other.

Implementers should not expose entropy data, just provide equal/hashcode.

Objects represented by an Identifier, should be able to use them as their equal/hashcodes.

Manually Applied Patch from Empire Minecraft - Originally by Aikar
---
 .../java/org/bukkit/craftbukkit/CraftChunk.java    | 36 ++++++++++++++++++++++
 .../org/bukkit/craftbukkit/block/CraftBlock.java   | 29 +++++++++++++++++
 2 files changed, 65 insertions(+)

diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index ba3676b67..b5488aa14 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -29,6 +29,7 @@ public class CraftChunk implements Chunk {
         worldServer = (WorldServer) getHandle().world;
         x = getHandle().locX;
         z = getHandle().locZ;
+        chunkKey = new ChunkIdentifier(this); // PaperDragon
     }
 
     public World getWorld() {
@@ -309,4 +310,39 @@ public class CraftChunk implements Chunk {
     static {
         Arrays.fill(emptySkyLight, (byte) 0xFF);
     }
+
+    // PaperDragon start
+    private final ChunkIdentifier chunkKey;
+    public com.domnian.paperdragon.Identifier getIdentifier() {
+        return chunkKey;
+    }
+
+    @Override
+    public int hashCode() {
+        return chunkKey.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        return obj instanceof Chunk && chunkKey.equals(((Chunk) obj).getIdentifier());
+    }
+
+    private static class ChunkIdentifier implements com.domnian.paperdragon.Identifier {
+        private final World world;
+        private final int x, z;
+        private ChunkIdentifier(final Chunk chunk) {
+            this.world = chunk.getWorld();
+            this.x = chunk.getX();
+            this.z = chunk.getZ();
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            final ChunkIdentifier that = (ChunkIdentifier) o;
+            return x == that.x && z == that.z && world.equals(that.world);
+        }
+    }
+    // PaperDragon end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index bea02c493..3cb9bb220 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -35,6 +35,7 @@ public class CraftBlock implements Block {
         this.y = y;
         this.z = z;
         this.chunk = chunk;
+        this.blockKey = new BlockIdentifier(); // PaperDragon
     }
 
     private net.minecraft.server.Block getNMSBlock() {
@@ -553,4 +554,32 @@ public class CraftBlock implements Block {
     public void removeMetadata(String metadataKey, Plugin owningPlugin) {
         chunk.getCraftWorld().getBlockMetadata().removeMetadata(this, metadataKey, owningPlugin);
     }
+
+    // PaperDragon start
+    private final com.domnian.paperdragon.Identifier blockKey;
+    @Override
+    public com.domnian.paperdragon.Identifier getIdentifier() {
+        return blockKey;
+    }
+
+    private class BlockIdentifier implements com.domnian.paperdragon.Identifier {
+        private final CraftBlock block;
+        private BlockIdentifier() {
+            this.block = CraftBlock.this;
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            BlockIdentifier that = (BlockIdentifier) o;
+            return x == that.block.getX() && y == that.block.y && z == that.block.z && block.getWorld().equals(that.block.getWorld());
+        }
+
+        @Override
+        public int hashCode() {
+            return 73 * (73 * (73 * chunk.getWorld().hashCode() + x) + y) + z;
+        }
+    }
+    // PaperDragon end
 }
-- 
2.15.1

