From cdb521abb3501dd4572737403d2dcc930f236d3a Mon Sep 17 00:00:00 2001
From: willies952002 <admin@domnian.com>
Date: Mon, 25 Dec 2017 22:30:36 -0500
Subject: [PATCH] EntityTasks API

Allows scheduling repeating task timers on an entity level.
Avoids Bukkit system so that tasks will simply maintain themselves on entity removal.

Manually Applied Patch from Empire Minecraft - Originally by Aikar
---
 .../paperdragon/api/CraftDAPI_Entity.java     | 22 ++++++++
 .../java/net/minecraft/server/Entity.java     |  1 +
 .../minecraft/server/EntityTasksHandler.java  | 52 +++++++++++++++++++
 src/main/java/net/minecraft/server/World.java |  1 +
 .../org/bukkit/craftbukkit/CraftServer.java   |  1 +
 5 files changed, 77 insertions(+)
 create mode 100644 src/main/java/net/minecraft/server/EntityTasksHandler.java

diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
index c5074160a..be31b1218 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
@@ -33,11 +33,33 @@ import org.bukkit.entity.Entity;
 import org.bukkit.entity.Item;
 
 import java.io.*;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class CraftDAPI_Entity implements DAPI_Entity {
 
+    public EntityTask scheduleTask(Entity entity, int interval, final Runnable task) {
+        return scheduleTask(entity, interval, new EntityTask() {
+            @Override
+            public void run(Entity entity) {
+                task.run();
+            }
+        });
+    }
+
+    @Override
+    public EntityTask scheduleTask(Entity entity, int interval, EntityTask task) {
+        final EntityTasksHandler.TaskList entityTasks = ((CraftEntity)entity).getHandle().entityTasks;
+        List<EntityTask> entityTaskList = entityTasks.computeIfAbsent(interval, k -> new ArrayList<>(8));
+        entityTaskList.add(task);
+        return task;
+    }
+    public void cancelTasks(Entity entity) {
+        ((CraftEntity)entity).getHandle().entityTasks.clear();
+    }
+
     public final byte[] serializeEntity(Entity craftentity) {
         if (craftentity == null) {
             throw new NullPointerException("Entity can not be null for serialization");
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 12b012515..d036408d2 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -46,6 +46,7 @@ public abstract class Entity implements ICommandListener {
 
     // CraftBukkit start
     public com.domnian.paperdragon.api.meta.PersistentMetaMap metaMap = null; // PaperDragon - Persistent and Temporary Meta API
+    public EntityTasksHandler.TaskList entityTasks = new EntityTasksHandler.TaskList(); // PaperDragon
     private static final int CURRENT_LEVEL = 2;
     public static Random SHARED_RANDOM = new Random(); // Paper
     static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
diff --git a/src/main/java/net/minecraft/server/EntityTasksHandler.java b/src/main/java/net/minecraft/server/EntityTasksHandler.java
new file mode 100644
index 000000000..8d01b34b0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityTasksHandler.java
@@ -0,0 +1,52 @@
+package net.minecraft.server;
+
+import com.domnian.paperdragon.api.DragonAPI;
+import com.domnian.paperdragon.api.EntityTask;
+import org.bukkit.*;
+import org.bukkit.World;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+
+import static java.util.Map.Entry;
+
+public final class EntityTasksHandler {
+
+    private EntityTasksHandler() {}
+
+    public static void tickHandler(Entity entity) {
+        if (entity.entityTasks.isEmpty()) {
+            return;
+        }
+        int entityKey = entity.ticksLived - entity.getId();
+        for (Entry<Integer, List<EntityTask>> entry : entity.entityTasks.entrySet()) {
+            int runEvery = entry.getKey();
+            if (entityKey % runEvery != 0 || entry.getValue().isEmpty()) {
+                continue;
+            }
+            final Iterator<EntityTask> it = entry.getValue().iterator();
+            while (it.hasNext()) {
+                EntityTask task = it.next();
+                if (task.limit > 0 && task.count++ > task.limit) {
+                    it.remove();
+                    break;
+                }
+                task.run(entity.getBukkitEntity());
+            }
+        }
+    }
+
+    public static void reload() {
+        for (final World world : Bukkit.getWorlds()) {
+            for (org.bukkit.entity.Entity entity : world.getEntities()) {
+                DragonAPI.entity.cancelTasks(entity);
+            }
+        }
+    }
+
+    public static class TaskList extends HashMap<Integer, List<EntityTask>> {
+
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 1dc4be851..307f54d6f 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1756,6 +1756,7 @@ public abstract class World implements IBlockAccess {
         int j;
 
         // CraftBukkit start - check if chunks are loaded as done in previous versions
+        EntityTasksHandler.tickHandler(entity); // PaperDragon
         // TODO: Go back to Vanilla behaviour when comfortable
         // Spigot start
         // Chunk startingChunk = this.getChunkIfLoaded(MathHelper.floor(entity.locX) >> 4, MathHelper.floor(entity.locZ) >> 4);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 664cd5899..18479faa7 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -810,6 +810,7 @@ public final class CraftServer implements Server {
             ));
         }
         net.minecraft.server.MetaApiAccessor.reload(); // PaperDragon - Persistent and Temporary Meta API
+        net.minecraft.server.EntityTasksHandler.reload(); // PaperDragon - Entity Tasks
         loadPlugins();
         enablePlugins(PluginLoadOrder.STARTUP);
         enablePlugins(PluginLoadOrder.POSTWORLD);
-- 
2.17.0

