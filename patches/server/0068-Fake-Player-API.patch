From 2a843848ad8fa84fd97bf7d4f46edc32ad7bf8cb Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Tue, 29 Dec 2020 01:32:45 -0600
Subject: [PATCH] Fake Player API

---
 .../paperdragon/api/CraftDAPI_Server.java     | 106 ++++++++++++++++++
 .../paperdragon/api/CraftDragonAPI.java       |   4 +
 .../paperdragon/api/CraftFakePlayer.java      |  53 +++++++++
 .../server/PacketPlayOutPlayerInfo.java       |  15 +++
 .../java/net/minecraft/server/PlayerList.java |  10 +-
 .../craftbukkit/entity/CraftPlayer.java       |  75 +++++++++++++
 6 files changed, 262 insertions(+), 1 deletion(-)
 create mode 100644 src/main/java/com/domnian/paperdragon/api/CraftDAPI_Server.java
 create mode 100644 src/main/java/com/domnian/paperdragon/api/CraftFakePlayer.java

diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Server.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Server.java
new file mode 100644
index 0000000000..9fd3fa51b4
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Server.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2020. Starlis LLC / dba Empire Minecraft
+ *
+ * This source code is proprietary software and must not be redistributed without Starlis LLC's approval
+ *
+ */
+
+package com.domnian.paperdragon.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.google.common.collect.Maps;
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.PacketPlayOutPlayerInfo;
+import net.minecraft.server.PacketPlayOutPlayerInfo.EnumPlayerInfoAction;
+import org.bukkit.GameMode;
+
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+public class CraftDAPI_Server implements DAPI_Server {
+    public final Map<UUID, FakePlayer> fakePlayerMap = Maps.newHashMap();
+    @Nullable
+    @Override
+    public FakePlayer getFakePlayerByUUID(UUID uuid) {
+        return fakePlayerMap.get(uuid);
+    }
+
+    @Override
+    public void doFakePlayerJoin(FakePlayer fakePlayer) {
+        UUID uuid = fakePlayer.getUniqueId();
+        if (fakePlayerMap.containsKey(uuid)) {
+            return;
+        }
+        fakePlayerMap.put(uuid, fakePlayer);
+
+        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, fakePlayer);
+        for (EntityPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+            if (entityPlayer.getBukkitEntity().canSee(fakePlayer)) {
+                entityPlayer.playerConnection.sendPacket(packet);
+            }
+        }
+    }
+
+    @Override
+    public void doFakePlayerQuit(FakePlayer fakePlayer) {
+        UUID uuid = fakePlayer.getUniqueId();
+        if (!fakePlayerMap.containsKey(uuid)) {
+            return;
+        }
+        fakePlayerMap.remove(uuid);
+
+        PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.REMOVE_PLAYER, fakePlayer);
+        for (EntityPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+            if (entityPlayer.getBukkitEntity().canSee(fakePlayer)) {
+                entityPlayer.playerConnection.sendPacket(packet);
+            } else {
+                entityPlayer.getBukkitEntity().hiddenFakePlayers.remove(fakePlayer.getUniqueId());
+            }
+        }
+    }
+
+    @Override
+    public void doUpdateFakePlayerPing(FakePlayer fakePlayer, int ping) {
+        ((CraftFakePlayer) fakePlayer).ping = ping;
+        sendUpdatePackets(fakePlayer, EnumPlayerInfoAction.UPDATE_LATENCY);
+    }
+
+    @Override
+    public void doUpdateFakePlayerGameMode(FakePlayer fakePlayer, GameMode gameMode) {
+        ((CraftFakePlayer) fakePlayer).gameMode = gameMode;
+        sendUpdatePackets(fakePlayer, EnumPlayerInfoAction.UPDATE_GAME_MODE);
+    }
+
+    @Override
+    public void doUpdateFakePlayerListName(FakePlayer fakePlayer, String playerListName) {
+        ((CraftFakePlayer) fakePlayer).playerListName = playerListName;
+        sendUpdatePackets(fakePlayer, EnumPlayerInfoAction.UPDATE_DISPLAY_NAME);
+    }
+
+    private void sendUpdatePackets(FakePlayer fakePlayer, EnumPlayerInfoAction action) {
+        if (fakePlayerMap.containsKey(fakePlayer.getUniqueId())) {
+            PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(action, fakePlayer);
+            for (EntityPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+                if (entityPlayer.getBukkitEntity().canSee(fakePlayer)) {
+                    entityPlayer.playerConnection.sendPacket(packet);
+                }
+            }
+        }
+    }
+
+    @Override
+    public FakePlayer createFakePlayer(PlayerProfile profile, int ping, GameMode gameMode, String playerListName) {
+        return new CraftFakePlayer(profile, ping, gameMode, playerListName);
+    }
+
+    @Override
+    public Set<FakePlayer> getJoinedFakePlayers() {
+        return Collections.unmodifiableSet(new HashSet<>(fakePlayerMap.values()));
+    }
+
+}
diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java b/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
index a6408aab4f..f31082d0f9 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
@@ -37,6 +37,10 @@ public final class CraftDragonAPI extends DragonAPI {
         meta = new CraftDAPI_Meta();
         chat = new CraftDAPI_Chat();
         heads = new CraftDAPI_Heads();
+        server = new CraftDAPI_Server();
     }
 
+    public static CraftDAPI_Server getServer() {
+        return (CraftDAPI_Server) server;
+    }
 }
diff --git a/src/main/java/com/domnian/paperdragon/api/CraftFakePlayer.java b/src/main/java/com/domnian/paperdragon/api/CraftFakePlayer.java
new file mode 100644
index 0000000000..e7b5e3d403
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/CraftFakePlayer.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2020. Starlis LLC / dba Empire Minecraft
+ *
+ * This source code is proprietary software and must not be redistributed without Starlis LLC's approval
+ *
+ */
+
+package com.domnian.paperdragon.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import org.bukkit.GameMode;
+
+import java.util.UUID;
+
+public class CraftFakePlayer implements FakePlayer {
+    private final PlayerProfile profile;
+    public int ping;
+    public GameMode gameMode;
+    public String playerListName;
+    public boolean sentListPacket;
+
+    public CraftFakePlayer(PlayerProfile profile, int ping, GameMode gameMode, String playerListName) {
+        this.profile = profile;
+        this.ping = ping;
+        this.gameMode = gameMode;
+        this.playerListName = playerListName;
+    }
+
+    @Override
+    public PlayerProfile getProfile() {
+        return profile;
+    }
+
+    @Override
+    public String getPlayerListName() {
+        return playerListName;
+    }
+
+    @Override
+    public int getPing() {
+        return ping;
+    }
+
+    @Override
+    public GameMode getGameMode() {
+        return gameMode;
+    }
+
+    @Override
+    public UUID getUniqueId() {
+        return profile.getId();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
index 9a48a4e90c..00c42b978b 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import com.domnian.paperdragon.api.FakePlayer; // PaperDragon
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
@@ -16,6 +17,20 @@ public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
 
     public PacketPlayOutPlayerInfo() {}
 
+    // PaperDragon start
+    public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction enumplayerinfoaction, FakePlayer... fakePlayers) {
+        this.a = enumplayerinfoaction;
+        for (FakePlayer fakePlayer : fakePlayers) {
+            if (fakePlayer.getUniqueId() != null) {
+                this.b.add(new PlayerInfoData(
+                    com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlib(fakePlayer.getProfile()),
+                    fakePlayer.getPing(),
+                    EnumGamemode.getById(fakePlayer.getGameMode().getValue()),
+                    org.bukkit.craftbukkit.util.CraftChatMessage.fromStringOrNull(fakePlayer.getPlayerListName())));
+            }
+        }
+    }
+    // PaperDragon end
     public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, EntityPlayer... aentityplayer) {
         this.a = packetplayoutplayerinfo_enumplayerinfoaction;
         EntityPlayer[] aentityplayer1 = aentityplayer;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 5ba5d9584a..1c511a9d22 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import co.aikar.timings.MinecraftTimings;
+import com.domnian.paperdragon.api.CraftDragonAPI; // PaperDragon
+import com.domnian.paperdragon.api.FakePlayer; // PaperDragon
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -287,7 +289,13 @@ public abstract class PlayerList {
 
         // CraftBukkit start - sendAll above replaced with this loop
         PacketPlayOutPlayerInfo packet = new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, entityplayer);
-
+        // PaperDragon start
+        for (FakePlayer fakePlayer : CraftDragonAPI.getServer().fakePlayerMap.values()) {
+            if (entityplayer.getBukkitEntity().canSee(fakePlayer)) {
+                entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, fakePlayer));
+            }
+        }
+        // PaperDragon end
         for (int i = 0; i < this.players.size(); ++i) {
             EntityPlayer entityplayer1 = (EntityPlayer) this.players.get(i);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b196d78347..c16c11050f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -4,6 +4,10 @@ import com.destroystokyo.paper.ClientOption.ChatVisibility;
 import com.destroystokyo.paper.PaperSkinParts;
 import com.destroystokyo.paper.ClientOption;
 import com.destroystokyo.paper.Title;
+// PaperDragon start
+import com.domnian.paperdragon.api.CraftDragonAPI;
+import com.domnian.paperdragon.api.FakePlayer;
+// PaperDragon end
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
@@ -1384,6 +1388,77 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public boolean canSee(Player player) {
         return !hiddenPlayers.containsKey(player.getUniqueId());
     }
+    // PaperDragon start
+    public final Map<UUID, Set<WeakReference<Plugin>>> hiddenFakePlayers = new HashMap<>();
+
+    @Override
+    public boolean canSee(FakePlayer fakePlayer) {
+        return !hiddenFakePlayers.containsKey(fakePlayer.getUniqueId());
+    }
+
+    @Override
+    public void hideFakePlayer(Plugin plugin, FakePlayer fakePlayer) {
+        if (getHandle().playerConnection == null) {
+            return;
+        }
+        UUID fakeUUID = fakePlayer.getUniqueId();
+        if  (fakeUUID.equals(this.getUniqueId())) {
+            return;
+        }
+
+        Set<WeakReference<Plugin>> hidingPlugins = hiddenFakePlayers.get(fakeUUID);
+        if (hidingPlugins != null) {
+            // Some plugins are already hiding the player. Just mark that this
+            // plugin wants the player hidden too and end.
+            hidingPlugins.add(getPluginWeakReference(plugin));
+            return;
+        }
+        hidingPlugins = new HashSet<>();
+        hidingPlugins.add(getPluginWeakReference(plugin));
+        hiddenFakePlayers.put(fakeUUID, hidingPlugins);
+
+        if (CraftDragonAPI.getServer().fakePlayerMap.containsKey(fakeUUID)) {
+            getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.REMOVE_PLAYER, fakePlayer));
+        }
+    }
+
+    @Override
+    public void showFakePlayer(Plugin plugin, FakePlayer fakePlayer) {
+        if (getHandle().playerConnection == null) {
+            return;
+        }
+        UUID fakeUUID = fakePlayer.getUniqueId();
+        if  (fakeUUID.equals(this.getUniqueId())) {
+            return;
+        }
+
+        Set<WeakReference<Plugin>> hidingPlugins = hiddenFakePlayers.get(fakeUUID);
+        if (hidingPlugins == null) {
+            return; // Player isn't hidden
+        }
+        hidingPlugins.remove(getPluginWeakReference(plugin));
+        if (!hidingPlugins.isEmpty()) {
+            return; // Some other plugins still want the player hidden
+        }
+        hiddenFakePlayers.remove(fakeUUID);
+        if (CraftDragonAPI.getServer().fakePlayerMap.containsKey(fakeUUID)) {
+            getHandle().playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, fakePlayer));
+        }
+    }
+
+    @Override
+    public Set<FakePlayer> getHiddenFakePlayers() {
+        Set<FakePlayer> ret = new HashSet<>();
+        for (UUID uuid : hiddenFakePlayers.keySet()) {
+            FakePlayer fakePlayer = CraftDragonAPI.server.getFakePlayerByUUID(uuid);
+            if (fakePlayer != null) {
+                ret.add(fakePlayer);
+            }
+        }
+
+        return java.util.Collections.unmodifiableSet(ret);
+    }
+    // PaperDragon end
 
     @Override
     public Map<String, Object> serialize() {
-- 
2.17.1

