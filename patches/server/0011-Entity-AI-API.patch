From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 6 Dec 2016 22:22:14 -0500
Subject: [PATCH] Entity AI API


diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
index 13e53765916b1c18bd5540663c907ab06cedaa0c..26d89f2c780e9faef0b4182ca972961577942f0f 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Entity.java
@@ -23,10 +23,45 @@
 
 package com.domnian.paperdragon.api;
 
+import com.destroystokyo.paper.entity.RangedEntity;
+import com.domnian.paperdragon.api.meta.Meta;
+import net.minecraft.server.MCUtil;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.ai.goal.Goal;
+import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
+import net.minecraft.world.entity.ai.goal.RangedAttackGoal;
+import net.minecraft.world.entity.ai.goal.RangedBowAttackGoal;
+import net.minecraft.world.entity.ai.goal.WrappedGoal;
+import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.player.Player;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftBlaze;
+import org.bukkit.craftbukkit.entity.CraftCreature;
+import org.bukkit.craftbukkit.entity.CraftEnderSignal;
 import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftGhast;
+import org.bukkit.craftbukkit.entity.CraftMob;
+import org.bukkit.craftbukkit.entity.CraftSpider;
+import org.bukkit.craftbukkit.entity.CraftWolf;
+import org.bukkit.entity.Blaze;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Ghast;
+import org.bukkit.entity.Item;
+import org.bukkit.entity.Mob;
+import org.bukkit.entity.Spider;
+import org.bukkit.entity.Wolf;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.HashSet;
+import java.util.Set;
+import java.util.regex.Pattern;
+
+import static com.domnian.paperdragon.api.EntityAIApi.ENTITY_AGGRESSIVE_RANGE_KEY;
+
 public class CraftDAPI_Entity implements DAPI_Entity {
 
     @NotNull
@@ -39,4 +74,226 @@ public class CraftDAPI_Entity implements DAPI_Entity {
     public void cancelTasks(@NotNull Entity entity) {
         ((CraftEntity) entity).getHandle().entityTasks.clear();
     }
+
+    @Override
+    public boolean isEntityDisabled(@NotNull Entity entity) {
+        return ((CraftEntity) entity).getHandle().isDisabled;
+    }
+
+    @Override
+    public void setItemCanDespawn(@NotNull Item item, boolean canDespawn) {
+        final net.minecraft.world.entity.Entity handle = ((CraftEntity) item).getHandle();
+        ((ItemEntity) handle).canDespawn = canDespawn;
+    }
+
+    @Override
+    public void setDisabledEntity(@NotNull Entity entity, boolean disabled) {
+        ((CraftEntity) entity).getHandle().isDisabled = disabled;
+    }
+
+    @Override
+    public void setFireProof(@NotNull Mob mob, boolean flag) {
+        ((CraftEntity) mob).getHandle().fireProof = flag;
+    }
+
+    @Override
+    public void setPanicProof(@NotNull Mob mob, boolean flag) {
+        ((CraftMob) mob).getHandle().panicProof = flag;
+    }
+
+    @Override
+    public void makeAggressive(@NotNull Creature creature, float range) {
+        PathfinderMob handle = ((CraftCreature) creature).getHandle();
+        if (!handle.markedAggressive) {
+            handle.goalSelector.addGoal(2, new MeleeAttackGoal(handle, 1.0F, false));
+            handle.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(handle, Player.class, true));
+            Meta.setEntityMeta(creature, ENTITY_AGGRESSIVE_RANGE_KEY, range);
+            setTargetRange(creature, (double) range);
+            handle.markedAggressive = true;
+        }
+    }
+
+    @Override
+    public void makeAggressiveDuringDay(@NotNull Spider spider, boolean attack) {
+        ((CraftSpider) spider).getHandle().attackDuringDay = attack;
+    }
+
+    @Override
+    public boolean isAggressive(@NotNull Creature creature) {
+        PathfinderMob entity = ((CraftCreature) creature).getHandle();
+        return entity.markedAggressive;
+    }
+
+    @Override
+    public void makePeaceful(@NotNull Mob mob) {
+        net.minecraft.world.entity.Mob handle = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+
+        EntityAIApi.getGoalSets(handle).forEach(set -> set.removeIf(o -> EntityAIApi.isHostileGoal(o.getGoal())));
+    }
+
+    @Override
+    public void addGoalByName(@NotNull Mob mob, @NotNull String goalName, boolean isTargetGoal, int tickRate, @NotNull Class<?>[] argClasses, @NotNull Object... args) {
+        net.minecraft.world.entity.Mob handle = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+        String nms = handle.getClass().getPackage().getName();
+        String className = nms + "." + goalName;
+        try {
+            Goal goal = EntityAIApi.getPathfinderGoal(handle, argClasses, className, args);
+            if (goal == null) {
+                MinecraftServer.LOGGER.error("Could not create goal for " + className);
+                return;
+            }
+            if (isTargetGoal) {
+                handle.targetSelector.addGoal(tickRate, goal);
+            } else {
+                handle.goalSelector.addGoal(tickRate, goal);
+            }
+        } catch (Exception e) {
+            MinecraftServer.LOGGER.error("Error adding goal by name");
+            e.printStackTrace();
+        }
+    }
+
+    private static final Pattern ENTITY_PACKAGE = Pattern.compile("net.minecraft.world.entity.");
+    @Override
+    public void removeGoalByName(@NotNull Mob mob, @NotNull String goalName) {
+        net.minecraft.world.entity.Mob entity = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+        for (Set<WrappedGoal> set : EntityAIApi.getGoalSets(entity)) {
+            set.removeIf(o -> ENTITY_PACKAGE.matcher(o.getGoal().getClass().getName()).replaceAll("")
+                                            .equalsIgnoreCase(goalName));
+        }
+    }
+    @NotNull
+    @Override
+    public Set<String> listGoalNames(@NotNull Mob mob) {
+        Set<String> goals = new HashSet<>();
+        net.minecraft.world.entity.Mob entity = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+        for (Set<WrappedGoal> set : EntityAIApi.getGoalSets(entity)) {
+            for (WrappedGoal wrappedGoal : set) {
+                goals.add(ENTITY_PACKAGE.matcher(wrappedGoal.getGoal().getClass().getName()).replaceAll(""));
+            }
+        }
+        return goals;
+    }
+
+    @Override
+    public void setEntitySize(@NotNull Entity entity, float width, float height) {
+        ((CraftEntity) entity).getHandle().setDimensions(width, height);
+    }
+
+    @Override
+    public void setTargetRange(@NotNull Mob mob, Double range) {
+        net.minecraft.world.entity.Mob entity = (net.minecraft.world.entity.Mob) ((CraftEntity) mob).getHandle();
+        entity.targetRange = range;
+    }
+
+    @Override
+    public void setRangedAttackDistance(@NotNull RangedEntity ranged, float range) {
+        setTargetRange(ranged, (double) range);
+        net.minecraft.world.entity.Mob entity = (net.minecraft.world.entity.Mob) ((CraftEntity) ranged).getHandle();
+        EntityAIApi.getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            Goal goal = o.getGoal();
+            if (goal instanceof RangedAttackGoal) {
+                ((RangedAttackGoal) goal).setAttackRadius(range);
+            } else if (goal instanceof RangedBowAttackGoal) {
+                ((RangedBowAttackGoal<?>) goal).setAttackRadius(range);
+            }
+        }));
+    }
+
+    @Override
+    public void setRangedAttackSpeed(@NotNull RangedEntity ranged, Integer min, Integer max) {
+        if (min == null && max == null) {
+            return;
+        }
+        net.minecraft.world.entity.Mob entity = (net.minecraft.world.entity.Mob) ((CraftEntity) ranged).getHandle();
+        EntityAIApi.getGoalSets(entity).forEach(set -> set.forEach(o -> {
+            Goal goal = o.getGoal();
+            if (goal instanceof RangedAttackGoal) {
+                if (min != null) {
+                    ((RangedAttackGoal) goal).setMinInterval(min);
+                }
+                if (max != null) {
+                    ((RangedAttackGoal) goal).setMaxInterval(max);
+                }
+            } else if (goal instanceof RangedBowAttackGoal) {
+                int speed = min != null && max != null ? Math.min(min, max) : (min != null ? min : max);
+                ((RangedBowAttackGoal<?>) goal).setMinAttackInterval(speed);
+            }
+        }));
+    }
+
+    @Override
+    public void setAlwaysAngry(@NotNull Wolf wolf, boolean alwaysAngry) {
+        net.minecraft.world.entity.animal.Wolf entity = ((CraftWolf) wolf).getHandle();
+        entity.alwaysAngry = alwaysAngry;
+        if (alwaysAngry) {
+            entity.startPersistentAngerTimer();
+        }
+    }
+
+    @Override
+    public void respawnEntity(@NotNull Entity entity) {
+        CraftEntity craft = (CraftEntity) entity;
+        net.minecraft.world.entity.Entity newHandle = craft.getHandle().teleportTo(((CraftWorld) entity.getWorld()).getHandle(),
+            MCUtil.toBlockPosition(entity.getLocation())
+        );
+        if (newHandle != null) {
+            craft.setHandle(newHandle);
+        }
+    }
+
+    @Override
+    public void setEnderSignalExactTarget(@NotNull EnderSignal enderSignal, boolean exact) {
+        ((CraftEnderSignal) enderSignal).getHandle().exactTarget = exact;
+    }
+
+    @Override
+    public void setEnderSignalSpeed(@NotNull EnderSignal enderSignal, double speed) {
+        ((CraftEnderSignal) enderSignal).getHandle().speed = speed / 10000D;
+    }
+
+    @Override
+    public double getEnderSignalSpeed(@NotNull EnderSignal enderSignal) {
+        return ((CraftEnderSignal) enderSignal).getHandle().speed * 10000D;
+    }
+
+    @Override
+    public void setEnderSignalLife(@NotNull EnderSignal enderSignal, int lifeTime) {
+        ((CraftEnderSignal) enderSignal).getHandle().lifeTime = lifeTime;
+    }
+
+    @Override
+    public int getEnderSignalLife(@NotNull EnderSignal enderSignal) {
+        return ((CraftEnderSignal) enderSignal).getHandle().lifeTime;
+    }
+
+    @Override
+    public void setFireballs(@NotNull Blaze blaze, int num) {
+        ((CraftBlaze) blaze).getHandle().numFireballs = num;
+    }
+
+    @Override
+    public int getNumFireballs(@NotNull Blaze blaze) {
+        return ((CraftBlaze) blaze).getHandle().numFireballs;
+    }
+
+    @Override
+    public int getTimeBetweenFireballs(@NotNull Blaze blaze) {
+        return ((CraftBlaze) blaze).getHandle().timeBetweenFireballs;
+    }
+
+    @Override
+    public void setTimeBetweenFireballs(@NotNull Blaze blaze, int timeBetweenFireballs) {
+        ((CraftBlaze) blaze).getHandle().timeBetweenFireballs = timeBetweenFireballs;
+    }
+
+    @Override
+    public int getFireballCooldown(@NotNull Ghast ghast) {
+        return ((CraftGhast) ghast).getHandle().fireballCooldown;
+    }
+
+    @Override
+    public void setFireballCooldown(@NotNull Ghast ghast, int cooldown) {
+        ((CraftGhast) ghast).getHandle().fireballCooldown = cooldown;
+    }
 }
diff --git a/src/main/java/com/domnian/paperdragon/api/EntityAIApi.java b/src/main/java/com/domnian/paperdragon/api/EntityAIApi.java
new file mode 100644
index 0000000000000000000000000000000000000000..79fdc8a2ed1cda124f5ac31633a56f368696d694
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/EntityAIApi.java
@@ -0,0 +1,142 @@
+package com.domnian.paperdragon.api;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.ai.goal.BreakDoorGoal;
+import net.minecraft.world.entity.ai.goal.Goal;
+import net.minecraft.world.entity.ai.goal.MeleeAttackGoal;
+import net.minecraft.world.entity.ai.goal.MoveThroughVillageGoal;
+import net.minecraft.world.entity.ai.goal.OcelotAttackGoal;
+import net.minecraft.world.entity.ai.goal.RangedAttackGoal;
+import net.minecraft.world.entity.ai.goal.RangedBowAttackGoal;
+import net.minecraft.world.entity.ai.goal.WrappedGoal;
+import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
+import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
+import net.minecraft.world.entity.monster.Blaze;
+import net.minecraft.world.level.pathfinder.Node;
+import net.minecraft.world.level.pathfinder.Path;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Mob;
+import com.domnian.paperdragon.api.meta.Meta;
+import com.domnian.paperdragon.api.meta.MetaKey.PersistentKey;
+import org.bukkit.Location;
+
+import java.lang.reflect.Constructor;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+public final class EntityAIApi {
+
+    public static final PersistentKey ENTITY_AGGRESSIVE_RANGE_KEY = Meta.createPersistentKey("entityAggressiveRange");
+
+    private EntityAIApi() {
+    }
+
+    public static net.minecraft.world.entity.Mob getMobHandle(Mob entity) {
+        return (net.minecraft.world.entity.Mob) (((CraftEntity) entity).getHandle());
+    }
+
+    public static void processEntityAddToWorld(Entity entity) {
+        if (entity instanceof PathfinderMob) {
+            Number range = Meta.getEntityMeta(entity.getBukkitEntity(), ENTITY_AGGRESSIVE_RANGE_KEY);
+            if (range != null) {
+                DragonAPI.entity.makeAggressive((org.bukkit.entity.Creature) entity.getBukkitEntity(), range.floatValue());
+            }
+        }
+    }
+
+    public static boolean isHostileGoal(Goal goal) {
+        if (goal instanceof MeleeAttackGoal ||
+            goal instanceof OcelotAttackGoal ||
+            goal instanceof Blaze.BlazeAttackGoal ||
+            goal instanceof RangedAttackGoal ||
+            goal instanceof RangedBowAttackGoal ||
+            goal instanceof MoveThroughVillageGoal ||
+            goal instanceof BreakDoorGoal ||
+            goal instanceof NearestAttackableTargetGoal ||
+            goal instanceof HurtByTargetGoal) {
+            return true;
+        }
+        return false;
+    }
+
+    static Goal getPathfinderGoal(net.minecraft.world.entity.Mob handle, Class<?>[] argClasses, String className, Object[] args) throws Exception {
+        Class<?> aClass = Class.forName(className);
+        CTOR:
+        for (Constructor<?> ctor : aClass.getDeclaredConstructors()) {
+            Class<?>[] parameterTypes = ctor.getParameterTypes();
+            if ((args.length +1) != parameterTypes.length) {
+                continue;
+            }
+            if (!parameterTypes[0].isAssignableFrom(handle.getClass())) {
+                continue;
+            }
+            for (int i = 1; i < parameterTypes.length; i++) {
+                Class<?> pCls = parameterTypes[i];
+                // TODO: Map argClasses from CB counterparts to NMS such as LivingEntity.class => EntityLiving.class
+                if (!pCls.isAssignableFrom(argClasses[i-1])) {
+                    continue CTOR;
+                }
+            }
+            Object[] newArgs = new Object[args.length+1];
+            System.arraycopy(args, 0, newArgs, 1, args.length);
+            newArgs[0] = handle;
+            return (Goal) ctor.newInstance(newArgs);
+        }
+        return null;
+    }
+
+    static List<Set<WrappedGoal>> getGoalSets(net.minecraft.world.entity.Mob entity) {
+        List<Set<WrappedGoal>> check = new ArrayList<>();
+        check.add(new HashSet<>(entity.goalSelector.lockedFlags.values()));
+        check.add(new HashSet<>(entity.goalSelector.availableGoals));
+        check.add(new HashSet<>(entity.targetSelector.lockedFlags.values()));
+        check.add(new HashSet<>(entity.targetSelector.availableGoals));
+        return check;
+    }
+
+
+    private static Path getPathEntity(Mob entity) {
+        return getMobHandle(entity).getNavigation().getPath();
+    }
+
+    private static Path getPathEntity(Location loc, net.minecraft.world.entity.Mob handle) {
+        final boolean onGround = handle.isOnGround();
+        handle.setOnGround(true);
+        Path path = null;
+        if (loc != null) {
+            path = handle.getNavigation().createPath(new BlockPos(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), 0);
+        }
+
+        handle.setOnGround(onGround);
+        return path;
+    }
+
+
+    private static Path getPathEntity(LivingEntity target, net.minecraft.world.entity.Mob handle) {
+        final boolean onGround = handle.isOnGround();
+        handle.setOnGround(true);
+        Path path = null;
+        if (target != null) {
+            path = handle.getNavigation().createPath(((CraftEntity) target).getHandle(), 0);
+        }
+
+        handle.setOnGround(onGround);
+        return path;
+    }
+
+    private static Location getFinalLocation(Mob entity, Path pathEntity) {
+        if (pathEntity == null) {
+            return null;
+        }
+        final Node pathPoint = pathEntity.getEndNode();
+        if (pathPoint == null) {
+            return null;
+        }
+        return new Location(entity.getWorld(), pathPoint.x, pathPoint.y, pathPoint.z);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 3ffab62b2c6c5de10ffa99b49a6c45245cf51d04..31da7c2a6da9a61e99f6fac7df0931a54f929639 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1131,7 +1131,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             return Registry.ENTITY_TYPE.getKey(entity.getType()).toString();
         });
         gameprofilerfiller.incrementCounter("tickNonPassenger");
-        if (isActive) { // Paper - EAR 2
+        if (isActive && !entity.isDisabled) { // Paper - EAR 2 // PaperDragon
             TimingHistory.activatedEntityTicks++;
         entity.tick();
         entity.postTick(); // CraftBukkit
@@ -2472,6 +2472,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 entity.setOrigin(entity.getOriginVector().toLocation(getWorld()));
             }
             // Paper end
+            com.domnian.paperdragon.api.EntityAIApi.processEntityAddToWorld(entity); // PaperDragon
             new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index ecfc16d6c990a8aadb5374673f0d0c24a171201b..bfffbea6ca046ba840de3135c0da23af65337795 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -276,6 +276,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     protected Object2DoubleMap<TagKey<Fluid>> fluidHeight;
     protected boolean wasEyeInWater;
     private final Set<TagKey<Fluid>> fluidOnEyes;
+    public boolean fireProof = false; // PaperDragon
+    public boolean isDisabled = false; // PaperDragon
     public int invulnerableTime;
     protected boolean firstTick;
     protected final SynchedEntityData entityData;
@@ -309,7 +311,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     private final Set<String> tags;
     private final double[] pistonDeltas;
     private long pistonDeltasGameTime;
-    private EntityDimensions dimensions;
+    private EntityDimensions dimensions; public void setDimensions(float width, float height) { dimensions = EntityDimensions.fixed(width, height); } // PaperDragon
     private float eyeHeight;
     public boolean isInPowderSnow;
     public boolean wasInPowderSnow;
@@ -691,6 +693,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     public void setPos(double x, double y, double z) {
+        if (isDisabled) { return; } // PaperDragon
         this.setPosRaw(x, y, z, true); // Paper - force bounding box update
         // this.setBoundingBox(this.makeBoundingBox()); // Paper - move into setPositionRaw
     }
@@ -733,6 +736,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     // CraftBukkit end
 
     public void baseTick() {
+        if (isDisabled) { return; } // PaperDragon
         this.level.getProfiler().push("entityBaseTick");
         this.feetBlockState = null;
         if (this.isPassenger() && this.getVehicle().isRemoved()) {
@@ -944,6 +948,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     // Paper end - detailed watchdog information
 
     public void move(MoverType movementType, Vec3 movement) {
+        if (isDisabled) { return; } // PaperDragon
         // Paper start - detailed watchdog information
         io.papermc.paper.util.TickThread.ensureTickThread("Cannot move an entity off-main");
         synchronized (this.posLock) {
@@ -1552,7 +1557,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     public boolean fireImmune() {
-        return this.getType().fireImmune();
+        return this.getType().fireImmune() || this.fireProof; // PaperDragon
     }
 
     public boolean causeFallDamage(float fallDistance, float damageMultiplier, DamageSource damageSource) {
@@ -1751,6 +1756,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     public void absMoveTo(double x, double y, double z, float yaw, float pitch) {
+        if (isDisabled) { return; } // PaperDragon
         this.absMoveTo(x, y, z);
         this.setYRot(yaw % 360.0F);
         this.setXRot(Mth.clamp(pitch, -90.0F, 90.0F) % 360.0F);
@@ -1760,6 +1766,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     public void absMoveTo(double x, double y, double z) {
+        if (isDisabled) { return; } // PaperDragon
         double d3 = Mth.clamp(x, -3.0E7D, 3.0E7D);
         double d4 = Mth.clamp(z, -3.0E7D, 3.0E7D);
 
@@ -1783,6 +1790,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     public void moveTo(double x, double y, double z, float yaw, float pitch) {
+        if (isDisabled) { return; } // PaperDragon
         // Paper - cancel entity velocity if teleported
         if (!preserveMotion) {
             this.deltaMovement = Vec3.ZERO;
@@ -1844,6 +1852,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     public void playerTouch(Player player) {}
 
     public void push(Entity entity) {
+        if (isDisabled) { return; } // PaperDragon
         if (!this.isPassengerOfSameVehicle(entity)) {
             if (!entity.noPhysics && !this.noPhysics) {
                 if (this.level.paperConfig.onlyPlayersCollide && !(entity instanceof ServerPlayer || this instanceof ServerPlayer)) return; // Paper
@@ -1879,6 +1888,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     public void push(double deltaX, double deltaY, double deltaZ) {
+        if (isDisabled) { return; } // PaperDragon
         this.setDeltaMovement(this.getDeltaMovement().add(deltaX, deltaY, deltaZ));
         this.hasImpulse = true;
     }
@@ -1888,6 +1898,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     public boolean hurt(DamageSource source, float amount) {
+        if (isDisabled) { return false; } // PaperDragon
         if (this.isInvulnerableTo(source)) {
             return false;
         } else {
@@ -3205,7 +3216,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     public boolean isInvulnerableTo(DamageSource damageSource) {
-        return this.isRemoved() || this.invulnerable && damageSource != DamageSource.OUT_OF_WORLD && !damageSource.isCreativePlayer();
+        return this.isRemoved() || this.invulnerable && damageSource != DamageSource.OUT_OF_WORLD && !damageSource.isCreativePlayer() && !isDisabled; // PaperDragon - add !isDisabled
     }
 
     public boolean isInvulnerable() {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index fdd76d1a1636f30f519c434b41061d826c4a8261..523221d05e0b037a0b2dd3a1eafd9b2cffbae059 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -335,7 +335,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     public static AttributeSupplier.Builder createLivingAttributes() {
-        return AttributeSupplier.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS);
+        return AttributeSupplier.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS).add(Attributes.ATTACK_DAMAGE, 2.0D); // PaperDragon - add Attack Damage
     }
 
     @Override
@@ -772,7 +772,19 @@ public abstract class LivingEntity extends Entity {
         this.setAbsorptionAmount(absorptionAmount);
         // Paper end
         if (nbt.contains("Attributes", 9) && this.level != null && !this.level.isClientSide) {
-            this.getAttributes().load(nbt.getList("Attributes", 10));
+            // PaperDragon start
+            ListTag nbttaglist = nbt.getList("Attributes", 10);
+            Set<Integer> removeIndices = new HashSet<>();
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                if ("generic.targetRange".equals(nbttaglist.getCompound(i).getString("Name"))) {
+                    removeIndices.add(i);
+                }
+            }
+            for (int index : removeIndices) {
+                nbttaglist.remove(index);
+            }
+            this.getAttributes().load(nbttaglist);
+            // PaperDragon end
         }
 
         if (nbt.contains("ActiveEffects", 9)) {
@@ -2868,8 +2880,14 @@ public abstract class LivingEntity extends Entity {
     }
 
     public boolean doHurtTarget(Entity target) {
-        this.setLastHurtMob(target);
-        return false;
+        // PaperDragon start - make all mobs able to attack
+        boolean flag = target.hurt(DamageSource.mobAttack(this), (float) ((int) this.getAttribute(Attributes.ATTACK_DAMAGE).getValue()));
+        if (flag) {
+            this.doEnchantDamageEffects(this, target);
+            this.setLastHurtMob(target);
+        }
+        return flag;
+        // PaperDragon end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index b1ae9b0d8b229e2a6797a173cb11ecc0f43e2592..e8c1c4bb1274144950169a94474573287614f643 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -127,6 +127,8 @@ public abstract class Mob extends LivingEntity {
     private CompoundTag leashInfoTag;
     private BlockPos restrictCenter;
     private float restrictRadius;
+    public @Nullable Double targetRange; // PaperDragon
+    public boolean panicProof = false; // PaperDragon
 
     public boolean aware = true; // CraftBukkit
 
diff --git a/src/main/java/net/minecraft/world/entity/PathfinderMob.java b/src/main/java/net/minecraft/world/entity/PathfinderMob.java
index 744a99151ceecc85349861a99f6cb65e04c41b73..1e91f8f3c7615504e4d0fe737b404650a76c55c6 100644
--- a/src/main/java/net/minecraft/world/entity/PathfinderMob.java
+++ b/src/main/java/net/minecraft/world/entity/PathfinderMob.java
@@ -20,6 +20,7 @@ public abstract class PathfinderMob extends Mob {
 
     public org.bukkit.craftbukkit.entity.CraftCreature getBukkitCreature() { return (org.bukkit.craftbukkit.entity.CraftCreature) super.getBukkitEntity(); } // Paper
     public BlockPos movingTarget = null; public BlockPos getMovingTarget() { return movingTarget; } // Paper
+    public boolean markedAggressive = false; // PaperDragon
 
     public float getWalkTargetValue(BlockPos pos) {
         return this.getWalkTargetValue(pos, this.level);
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
index 150b8554ec017f7a8a1ee6959000f1954eb5e067..52a4c5b04949e051c904b10ec0e22a6ef9de92be 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FleeSunGoal.java
@@ -30,7 +30,7 @@ public class FleeSunGoal extends Goal {
             return false;
         } else if (!this.level.isDay()) {
             return false;
-        } else if (!this.mob.isOnFire()) {
+        } else if (!this.mob.isOnFire() || this.mob.panicProof) { // PaperDragon - fire panic immunity
             return false;
         } else if (!this.level.canSeeSky(this.mob.blockPosition())) {
             return false;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
index c77fad612ba99663af2ec4418e3c2d68752dc2c8..0c149b792e6b1a8e32203295fac7d1152a8d5ee1 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -27,7 +27,7 @@ public class GoalSelector {
             return false;
         }
     };
-    private final Map<Goal.Flag, WrappedGoal> lockedFlags = new EnumMap<>(Goal.Flag.class);
+    public final Map<Goal.Flag, WrappedGoal> lockedFlags = new EnumMap<>(Goal.Flag.class); // PaperDragon - make public
     public final Set<WrappedGoal> availableGoals = Sets.newLinkedHashSet();
     private final Supplier<ProfilerFiller> profiler;
     private final EnumSet<Goal.Flag> disabledFlags = EnumSet.noneOf(Goal.Flag.class); // Paper unused, but dummy to prevent plugins from crashing as hard. Theyll need to support paper in a special case if this is super important, but really doesn't seem like it would be.
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
index 268b7457c2a93af6d36c1c5f623c5856f94a7af1..894ae33ba2d9c28b3d8bed85d8cfe0467d587148 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
@@ -29,6 +29,7 @@ public class PanicGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.panicProof) { return false; } // PaperDragon
         if (!this.shouldPanic()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedAttackGoal.java
index 880ab615beee40a4d8542229962a67b47792ce82..cc08df773dbe07c3652c13f31ce74685f9335819 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedAttackGoal.java
@@ -15,10 +15,10 @@ public class RangedAttackGoal extends Goal {
     private int attackTime = -1;
     private final double speedModifier;
     private int seeTime;
-    private final int attackIntervalMin;
-    private final int attackIntervalMax;
-    private final float attackRadius;
-    private final float attackRadiusSqr;
+    private int attackIntervalMin; public void setMinInterval(int time) { this.attackIntervalMin = time; } // PaperDragon - make non-final
+    private int attackIntervalMax; public void setMaxInterval(int time) { this.attackIntervalMax = time; } // PaperDragon - make non-final
+    private float attackRadius; public void setAttackRadius(float radius) { this.attackRadius = radius; this.attackRadiusSqr = radius * radius; }// PaperDragon - make non-final
+    private float attackRadiusSqr; // PaperDragon - make non-final
 
     public RangedAttackGoal(RangedAttackMob mob, double mobSpeed, int intervalTicks, float maxShootRange) {
         this(mob, mobSpeed, intervalTicks, intervalTicks, maxShootRange);
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
index 6558b0d4bea99948fdc2b51751f3cfdc239d4b67..9e41493e7547faac0a4de739a50f31443165dbba 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RangedBowAttackGoal.java
@@ -12,7 +12,7 @@ public class RangedBowAttackGoal<T extends Monster & RangedAttackMob> extends Go
     private final T mob;
     private final double speedModifier;
     private int attackIntervalMin;
-    private final float attackRadiusSqr;
+    private float attackRadiusSqr; public void setAttackRadius(float radius) { this.attackRadiusSqr = radius * radius; } // PaperDragon - make non-final
     private int attackTime = -1;
     private int seeTime;
     private boolean strafingClockwise;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
index c9e6c2d0976bde92a94ae912e488ec30f250df55..40edef7002bd74a613bdedc33ea65ceefc5cfb01 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
@@ -78,6 +78,7 @@ public abstract class TargetGoal extends Goal {
     }
 
     protected double getFollowDistance() {
+        if (this.mob.targetRange != null) { return this.mob.targetRange; } // PaperDragon
         return this.mob.getAttributeValue(Attributes.FOLLOW_RANGE);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index aaf7096835bab3a42d617553dd83e048e4a83766..25919616c8d5d65b8061ffe2e02f17e2f5cc5a98 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -463,6 +463,13 @@ public class Wolf extends TamableAnimal implements NeutralMob {
         this.entityData.set(Wolf.DATA_REMAINING_ANGER_TIME, angerTime);
     }
 
+    // PaperDragon start
+    public boolean alwaysAngry = false;
+    @Override
+    public boolean isAngry() {
+        return alwaysAngry || NeutralMob.super.isAngry();
+    }
+    // PaperDragon end
     @Override
     public void startPersistentAngerTimer() {
         this.setRemainingPersistentAngerTime(Wolf.PERSISTENT_ANGER_TIME.sample(this.random));
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index f7d29950644a5cf12da0d31246d9f5fcbcc201bb..4cf329e313bc267c7f20c99faec6b0e2d403d78a 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -45,6 +45,7 @@ public class ItemEntity extends Entity {
     private static final int INFINITE_PICKUP_DELAY = 32767;
     private static final int INFINITE_LIFETIME = -32768;
     public int age;
+    public boolean canDespawn = true; // PaperDragon
     public int pickupDelay;
     public int health;
     @Nullable
@@ -174,7 +175,7 @@ public class ItemEntity extends Entity {
                 }
             }
 
-            if (!this.level.isClientSide && this.age >= this.getDespawnRate()) { // Spigot // Paper
+            if (canDespawn && !this.level.isClientSide && this.age >= this.getDespawnRate()) { // Spigot // Paper // PaperDragon - add canDespawn
                 // CraftBukkit start - fire ItemDespawnEvent
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
                     this.age = 0;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Blaze.java b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
index 40b387bfa1dbdb8dd2b4d23e9c130645469e1af0..5fc8c612819bf2d9437935bd8f66e6d898e72b8f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Blaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
@@ -30,6 +30,10 @@ public class Blaze extends Monster {
     private int nextHeightOffsetChangeTick;
     private static final EntityDataAccessor<Byte> DATA_FLAGS_ID = SynchedEntityData.defineId(Blaze.class, EntityDataSerializers.BYTE);
 
+    // PaperDragon start
+    public int numFireballs = 4;
+    public int timeBetweenFireballs = 6;
+    // PaperDragon end
     public Blaze(EntityType<? extends Blaze> type, Level world) {
         super(type, world);
         this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
@@ -147,7 +151,7 @@ public class Blaze extends Monster {
         this.entityData.set(DATA_FLAGS_ID, b);
     }
 
-    static class BlazeAttackGoal extends Goal {
+    public static class BlazeAttackGoal extends Goal { // PaperDragon - make public
         private final Blaze blaze;
         private int attackStep;
         private int attackTime;
@@ -213,8 +217,8 @@ public class Blaze extends Monster {
                         if (this.attackStep == 1) {
                             this.attackTime = 60;
                             this.blaze.setCharged(true);
-                        } else if (this.attackStep <= 4) {
-                            this.attackTime = 6;
+                        } else if (this.attackStep <= this.blaze.numFireballs) { // PaperDragon
+                            this.attackTime = this.blaze.timeBetweenFireballs; // PaperDragon
                         } else {
                             this.attackTime = 100;
                             this.attackStep = 0;
@@ -230,7 +234,9 @@ public class Blaze extends Monster {
                             for(int i = 0; i < 1; ++i) {
                                 SmallFireball smallFireball = new SmallFireball(this.blaze.level, this.blaze, e + this.blaze.getRandom().nextGaussian() * h, f, g + this.blaze.getRandom().nextGaussian() * h);
                                 smallFireball.setPos(smallFireball.getX(), this.blaze.getY(0.5D) + 0.5D, smallFireball.getZ());
+                                if (new com.domnian.paperdragon.events.BlazeLaunchFireballEvent((org.bukkit.entity.Blaze) this.blaze.getBukkitEntity(), (org.bukkit.entity.SmallFireball) smallFireball.getBukkitEntity()).callEvent()) { // PaperDragon
                                 this.blaze.level.addFreshEntity(smallFireball);
+                                } else { smallFireball.kill(); }// PaperDragon
                             }
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 77a5f8339df5a46967713b51570735de828f0b49..03aaaaac36d388b1b31d4189df6c3212e748b84d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -37,6 +37,7 @@ public class Ghast extends FlyingMob implements Enemy {
 
     private static final EntityDataAccessor<Boolean> DATA_IS_CHARGING = SynchedEntityData.defineId(Ghast.class, EntityDataSerializers.BOOLEAN);
     private int explosionPower = 1;
+    public int fireballCooldown = 40; // PaperDragon
 
     public Ghast(EntityType<? extends Ghast> type, Level world) {
         super(type, world);
@@ -340,7 +341,7 @@ public class Ghast extends FlyingMob implements Enemy {
                         entitylargefireball.bukkitYield = entitylargefireball.explosionPower = this.ghast.getExplosionPower();
                         entitylargefireball.setPos(this.ghast.getX() + vec3d.x * 4.0D, this.ghast.getY(0.5D) + 0.5D, entitylargefireball.getZ() + vec3d.z * 4.0D);
                         world.addFreshEntity(entitylargefireball);
-                        this.chargeTime = -40;
+                        this.chargeTime = -ghast.fireballCooldown; // PaperDragon
                     }
                 } else if (this.chargeTime > 0) {
                     --this.chargeTime;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index 05b6c07c0705c7d8741c77baa87982e8e278dc97..9deeb5fed719069f9c6ebc8ce48b92178be21548 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -187,7 +187,7 @@ public class Spider extends Monster {
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return 0.65F;
     }
-
+    public boolean attackDuringDay = false; // PaperDragon
     private static class SpiderAttackGoal extends MeleeAttackGoal {
 
         public SpiderAttackGoal(Spider spider) {
@@ -202,6 +202,7 @@ public class Spider extends Monster {
         @Override
         public boolean canContinueToUse() {
             float f = this.mob.getBrightness();
+            if (((Spider) this.mob).attackDuringDay) { f = 0.0F; } // PaperDragon
 
             if (f >= 0.5F && this.mob.getRandom().nextInt(100) == 0) {
                 this.mob.setTarget((LivingEntity) null);
@@ -226,6 +227,7 @@ public class Spider extends Monster {
         @Override
         public boolean canUse() {
             float f = this.mob.getBrightness();
+            if (((Spider) this.mob).attackDuringDay) { f = 0.0F; } // PaperDragon
 
             return f >= 0.5F ? false : super.canUse();
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java b/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
index 909de00db8c94ade82231e76ccd6c884cefed70b..76a68a600219342cabdc9a82976f426cdf3aebfb 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
@@ -27,6 +27,11 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
     public double tz;
     public int life;
     public boolean surviveAfterDeath;
+    // PaperDragon start
+    public int lifeTime = 80;
+    public double speed = 0.0025D;
+    public boolean exactTarget = false;
+    // PaperDragon end
 
     public EyeOfEnder(EntityType<? extends EyeOfEnder> type, Level world) {
         super(type, world);
@@ -87,6 +92,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
         double d3 = d1 - this.getZ();
         double d4 = Math.sqrt(d2 * d2 + d3 * d3);
 
+        if (exactTarget) d4 = 0; // PaperDragon
         if (d4 > 12.0D) {
             this.tx = this.getX() + d2 / d4 * 12.0D;
             this.tz = this.getZ() + d3 / d4 * 12.0D;
@@ -123,6 +129,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
         Vec3 vec3d = this.getDeltaMovement();
         double d0 = this.getX() + vec3d.x;
         double d1 = this.getY() + vec3d.y;
+        double distY = this.ty - d1; // PaperDragon
         double d2 = this.getZ() + vec3d.z;
         double d3 = vec3d.horizontalDistance();
 
@@ -131,9 +138,9 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
         if (!this.level.isClientSide) {
             double d4 = this.tx - d0;
             double d5 = this.tz - d2;
-            float f = (float) Math.sqrt(d4 * d4 + d5 * d5);
+            float f = (float) Math.sqrt(d4 * d4 + d5 * d5 + (exactTarget ? distY * distY : 0)); // PaperDragon
             float f1 = (float) Mth.atan2(d5, d4);
-            double d6 = Mth.lerp(0.0025D, d3, (double) f);
+            double d6 = Mth.lerp(speed, d3, (double) f); // PaperDragon
             double d7 = vec3d.y;
 
             if (f < 1.0F) {
@@ -160,7 +167,8 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
         if (!this.level.isClientSide) {
             this.setPos(d0, d1, d2);
             ++this.life;
-            if (this.life > 80 && !this.level.isClientSide) {
+            if (this.life > this.lifeTime && !this.level.isClientSide) { // PaperDragon - add lifeTime
+                if (!(new com.domnian.paperdragon.events.EnderSignalArriveEvent((org.bukkit.entity.EnderSignal) this.getBukkitEntity()).callEvent())) {return;} // PaperDragon
                 this.playSound(SoundEvents.ENDER_EYE_DEATH, 1.0F, 1.0F);
                 this.discard();
                 if (this.surviveAfterDeath) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index 13c1188639e00cd96e00b179c4e353582bf66e64..a6cff78dfaee666a4b7f584bd4b66d16bf3f91c4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -10,6 +10,7 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull; // PaperDragon
 
 public class CraftEnderSignal extends CraftEntity implements EnderSignal {
     public CraftEnderSignal(CraftServer server, EyeOfEnder entity) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index d0f0f380e9b185668580f31b061bdc08f0573a40..fa38b5bba5c06be935a2d71ea9059af777a7e9e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -24,6 +24,14 @@ public class CraftGhast extends CraftFlying implements Ghast {
     public EntityType getType() {
         return EntityType.GHAST;
     }
+    // PaperDragon start
+    public int getFireballCooldown() {
+        return getHandle().fireballCooldown;
+    }
+    public void setFireballCooldown(int cooldown) {
+        getHandle().fireballCooldown = cooldown;
+    }
+    // PaperDragon end
 
     // Paper start
     @Override
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 8bd8b85445b2b0b6517590baef33bb4234bb2a38..b7ac489fbe7e60a0c2dfca0c69d4e8ee3e76a3e9 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -365,6 +365,7 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
+        if (entity.isDisabled) return true; // PaperDragon
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( entity instanceof FireworkRocketEntity ) {
             return true;
